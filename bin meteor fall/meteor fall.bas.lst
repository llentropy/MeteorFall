------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\meteor fall.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\meteor fall.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\meteor fall.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    meteor_draw_mode =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    rand_temp  =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    dash_cooldown =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    meteor_speed =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    meteor_impact_position =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    meteor_control =	g
     48  10000 ????
     49  10000 ????		00 d9	    player0control =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 00	    scorefade  =	0
     62  10000 ????
     63  10000 ????		00 2b	    vblank_time =	43
     64  10000 ????		00 25	    overscan_time =	37
     65  10000 ????		00 01	    PFcolors   =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\meteor fall.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    meteor_draw_mode =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    rand_temp  =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    dash_cooldown =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    meteor_speed =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    meteor_impact_position =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    meteor_control =	g
     48  10000 ????
     49  10000 ????		00 d9	    player0control =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 00	    scorefade  =	0
     62  10000 ????
     63  10000 ????		00 2b	    vblank_time =	43
     64  10000 ????		00 25	    overscan_time =	37
     65  10000 ????		00 01	    PFcolors   =	1
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\meteor fall.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 64 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef					      ifconst	PFcolors
    403  f0ef		       a8		      tay
    404  f0f0		       b1 f0		      lda	(pfcolortable),y
    405  f0f2					      ifnconst	backgroundchange
    406  f0f2		       85 08		      sta	COLUPF
    407  f0f4				  -	      else
    408  f0f4				  -	      sta	COLUBK
    409  f0f4					      endif
    410  f0f4				  -	      ifconst	pfrowheight
    411  f0f4				  -	      lda	#pfrowheight
    412  f0f4					      else
    413  f0f4					      ifnconst	pfres
    414  f0f4		       a9 08		      lda	#8
    415  f0f6				  -	      else
    416  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0f6					      endif
    418  f0f6					      endif
    419  f0f6		       85 9c		      sta	temp1
    420  f0f8					      endif
    421  f0f8					      ifnconst	PFcolorandheight
    422  f0f8				  -	      ifnconst	PFcolors
    423  f0f8				  -	      ifnconst	PFheights
    424  f0f8				  -	      ifnconst	no_blank_lines
    425  f0f8				  -			; read paddle 0
    426  f0f8				  -			; lo-res paddle read
    427  f0f8				  -			; bit INPT0
    428  f0f8				  -			; bmi paddleskipread
    429  f0f8				  -			; inc paddle0
    430  f0f8				  -			;donepaddleskip
    431  f0f8				  -	      sleep	10
    432  f0f8				  -	      ifconst	pfrowheight
    433  f0f8				  -	      lda	#pfrowheight
    434  f0f8				  -	      else
    435  f0f8				  -	      ifnconst	pfres
    436  f0f8				  -	      lda	#8
    437  f0f8				  -	      else
    438  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f8				  -	      endif
    440  f0f8				  -	      endif
    441  f0f8				  -	      sta	temp1
    442  f0f8				  -	      endif
    443  f0f8				  -	      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101				  -	      ifnconst	PFcolors
    459  f101				  -	      sleep	10
    460  f101					      else
    461  f101		       a0 7c		      ldy	#124
    462  f103		       b1 f0		      lda	(pfcolortable),y
    463  f105		       85 08		      sta	COLUPF
    464  f107					      endif
    465  f107
    466  f107				  -	      ifconst	PFheights
    467  f107				  -	      ldx	#1
    468  f107				  -			;sleep 4
    469  f107				  -	      sleep	3	; this was over 1 cycle
    470  f107					      else
    471  f107		       a6 ef		      ldx	playfieldpos
    472  f109							;sleep 3
      0  f109					      sleep	2	; this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    474  f10a					      endif
    475  f10a
    476  f10a		       4c 28 f1 	      jmp	enterlastkernel
    477  f10d
    478  f10d				  -	      else
    479  f10d				  -lastkernelline
    480  f10d				  -
    481  f10d				  -	      ifconst	PFheights
    482  f10d				  -	      ldx	#1
    483  f10d				  -			;sleep 5
    484  f10d				  -	      sleep	4	; this was over 1 cycle
    485  f10d				  -	      else
    486  f10d				  -	      ldx	playfieldpos
    487  f10d				  -			;sleep 4
    488  f10d				  -	      sleep	3	; this was over 1 cycle
    489  f10d				  -	      endif
    490  f10d				  -
    491  f10d				  -	      cpx	#0
    492  f10d				  -	      bne	.enterfromNBL
    493  f10d				  -	      jmp	no_blank_lines_bailout
    494  f10d					      endif
    495  f10d
    496  f10d				  -	      if	((<*)>$d5)
    497  f10d				  -	      align	256
    498  f10d					      endif
    499  f10d							; this is a kludge to prevent page wrapping - fix!!!
    500  f10d
    501  f10d				   .skipDrawlastP1
    502  f10d		       a9 00		      lda	#0
    503  f10f		       a8		      tay		; added so we don't cross a page
    504  f110		       4c 3a f1 	      jmp	.continuelastP1
    505  f113
    506  f113				   .endkerloop		; enter at cycle 59??
    507  f113
    508  f113		       ea		      nop
    509  f114
    510  f114				   .enterfromNBL
    511  f114				  -	      ifconst	pfres
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f114				  -	      sty	PF1L	;3
    514  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f114				  -	      sty	PF2L	;3
    516  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f114				  -	      sty	PF1R	; possibly too early?
    518  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f114				  -	      sty	PF2R	;3
    520  f114					      else
    521  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f117		       84 0e		      sty	PF1L	;3
    523  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11c		       84 0f		      sty	PF2L	;3
    525  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f121		       84 0e		      sty	PF1R	; possibly too early?
    527  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f126		       84 0f		      sty	PF2R	;3
    529  f128					      endif
    530  f128
    531  f128				   enterlastkernel
    532  f128		       a5 92		      lda	ballheight
    533  f12a
    534  f12a							; tya
    535  f12a		       c7 89		      dcp	bally
    536  f12c							; sleep 4
    537  f12c
    538  f12c							; sbc stack3
    539  f12c		       2a		      rol
    540  f12d		       2a		      rol
    541  f12e		       85 1f		      sta	ENABL
    542  f130
    543  f130		       a5 8f		      lda	player1height	;3
    544  f132		       c7 86		      dcp	player1y	;5
    545  f134		       90 d7		      bcc	.skipDrawlastP1
    546  f136		       a4 86		      ldy	player1y	;3
    547  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13a							; so it doesn't cross a page boundary!
    549  f13a
    550  f13a				   .continuelastP1
    551  f13a		       85 1c		      sta	GRP1	;3
    552  f13c
    553  f13c					      ifnconst	player1colors
    554  f13c		       a5 87		      lda	missile1height	;3
    555  f13e		       c7 88		      dcp	missile1y	;5
    556  f140				  -	      else
    557  f140				  -	      lda	(player1color),y
    558  f140				  -	      sta	COLUP1
    559  f140					      endif
    560  f140
    561  f140		       ca		      dex
    562  f141							;dec temp4 ; might try putting this above PF writes
    563  f141		       f0 36		      beq	endkernel
    564  f143
    565  f143
    566  f143				  -	      ifconst	pfres
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f143				  -	      sty	PF1L	;3
    569  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f143				  -	      sty	PF2L	;3
    571  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f143				  -	      sty	PF1R	; possibly too early?
    573  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f143				  -	      sty	PF2R	;3
    575  f143					      else
    576  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f146		       84 0e		      sty	PF1L	;3
    578  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14b		       84 0f		      sty	PF2L	;3
    580  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f150		       84 0e		      sty	PF1R	; possibly too early?
    582  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f155		       84 0f		      sty	PF2R	;3
    584  f157					      endif
    585  f157
    586  f157					      ifnconst	player1colors
    587  f157		       2a		      rol		;2
    588  f158		       2a		      rol		;2
    589  f159		       85 1e		      sta	ENAM1	;3
    590  f15b				  -	      else
    591  f15b				  -	      ifnconst	playercolors
    592  f15b				  -	      sleep	7
    593  f15b				  -	      else
    594  f15b				  -	      lda.w	player0colorstore
    595  f15b				  -	      sta	COLUP0
    596  f15b				  -	      endif
    597  f15b					      endif
    598  f15b
    599  f15b		       ad 8e 00 	      lda.w	player0height
    600  f15e		       c7 85		      dcp	player0y
    601  f160		       90 11		      bcc	.skipDrawlastP0
    602  f162		       a4 85		      ldy	player0y
    603  f164		       b1 8a		      lda	(player0pointer),y
    604  f166				   .continuelastP0
    605  f166		       85 1b		      sta	GRP0
    606  f168
    607  f168
    608  f168
    609  f168					      ifnconst	no_blank_lines
    610  f168		       a5 90		      lda	missile0height	;3
    611  f16a		       c7 91		      dcp	missile0y	;5
    612  f16c		       e5 f6		      sbc	stack1
    613  f16e		       85 1d		      sta	ENAM0	;3
    614  f170		       4c 13 f1 	      jmp	.endkerloop
    615  f173				  -	      else
    616  f173				  -	      ifconst	readpaddle
    617  f173				  -	      ldy	currentpaddle
    618  f173				  -	      lda	INPT0,y
    619  f173				  -	      bpl	noreadpaddle2
    620  f173				  -	      inc	paddle
    621  f173				  -	      jmp	.endkerloop
    622  f173				  -noreadpaddle2
    623  f173				  -	      sleep	4
    624  f173				  -	      jmp	.endkerloop
    625  f173				  -	      else		; no_blank_lines and no paddle reading
    626  f173				  -	      pla
    627  f173				  -	      pha		; 14 cycles in 4 bytes
    628  f173				  -	      pla
    629  f173				  -	      pha
    630  f173				  -			; sleep 14
    631  f173				  -	      jmp	.endkerloop
    632  f173				  -	      endif
    633  f173					      endif
    634  f173
    635  f173
    636  f173							; ifconst donepaddleskip
    637  f173							;paddleskipread
    638  f173							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f173							; plus we get a lo-res paddle read
    640  f173							; bmi donepaddleskip
    641  f173							; endif
    642  f173
    643  f173				   .skipDrawlastP0
    644  f173		       a9 00		      lda	#0
    645  f175		       a8		      tay
    646  f176		       4c 66 f1 	      jmp	.continuelastP0
    647  f179
    648  f179				  -	      ifconst	no_blank_lines
    649  f179				  -no_blank_lines_bailout
    650  f179				  -	      ldx	#0
    651  f179					      endif
    652  f179
    653  f179				   endkernel
    654  f179							; 6 digit score routine
    655  f179		       86 0e		      stx	PF1
    656  f17b		       86 0f		      stx	PF2
    657  f17d		       86 0d		      stx	PF0
    658  f17f		       18		      clc
    659  f180
    660  f180				  -	      ifconst	pfrowheight
    661  f180				  -	      lda	#pfrowheight+2
    662  f180					      else
    663  f180					      ifnconst	pfres
    664  f180		       a9 0a		      lda	#10
    665  f182				  -	      else
    666  f182				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f182					      endif
    668  f182					      endif
    669  f182
    670  f182		       e5 ef		      sbc	playfieldpos
    671  f184		       85 ef		      sta	playfieldpos
    672  f186		       8a		      txa
    673  f187
    674  f187				  -	      ifconst	shakescreen
    675  f187				  -	      bit	shakescreen
    676  f187				  -	      bmi	noshakescreen2
    677  f187				  -	      ldx	#$3D
    678  f187				  -noshakescreen2
    679  f187					      endif
    680  f187
    681  f187		       95 02		      sta	WSYNC,x
    682  f189
    683  f189							; STA WSYNC ;first one, need one more
    684  f189		       85 0b		      sta	REFP0
    685  f18b		       85 0c		      sta	REFP1
    686  f18d		       85 1b		      STA	GRP0
    687  f18f		       85 1c		      STA	GRP1
    688  f191							; STA PF1
    689  f191							; STA PF2
    690  f191		       85 2b		      sta	HMCLR
    691  f193		       85 1d		      sta	ENAM0
    692  f195		       85 1e		      sta	ENAM1
    693  f197		       85 1f		      sta	ENABL
    694  f199
    695  f199		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19b		       85 85		      sta	player0y
    697  f19d		       a5 9e		      lda	temp3
    698  f19f		       85 86		      sta	player1y
    699  f1a1					      ifnconst	player1colors
    700  f1a1		       a5 a1		      lda	temp6
    701  f1a3		       85 88		      sta	missile1y
    702  f1a5					      endif
    703  f1a5					      ifnconst	playercolors
    704  f1a5					      ifnconst	readpaddle
    705  f1a5		       a5 a0		      lda	temp5
    706  f1a7		       85 91		      sta	missile0y
    707  f1a9					      endif
    708  f1a9					      endif
    709  f1a9		       a5 f7		      lda	stack2
    710  f1ab		       85 89		      sta	bally
    711  f1ad
    712  f1ad							; strangely, this isn't required any more. might have
    713  f1ad							; resulted from the no_blank_lines score bounce fix
    714  f1ad							;ifconst no_blank_lines
    715  f1ad							;sta WSYNC
    716  f1ad							;endif
    717  f1ad
    718  f1ad		       ad 84 02 	      lda	INTIM
    719  f1b0		       18		      clc
    720  f1b1				  -	      ifnconst	vblank_time
    721  f1b1				  -	      adc	#43+12+87
    722  f1b1					      else
    723  f1b1		       69 8e		      adc	#vblank_time+12+87
    724  f1b3
    725  f1b3					      endif
    726  f1b3							; sta WSYNC
    727  f1b3		       8d 96 02 	      sta	TIM64T
    728  f1b6
    729  f1b6				  -	      ifconst	minikernel
    730  f1b6				  -	      jsr	minikernel
    731  f1b6					      endif
    732  f1b6
    733  f1b6							; now reassign temp vars for score pointers
    734  f1b6
    735  f1b6							; score pointers contain:
    736  f1b6							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b6							; swap lo2->temp1
    738  f1b6							; swap lo4->temp3
    739  f1b6							; swap lo6->temp5
    740  f1b6					      ifnconst	noscore
    741  f1b6		       a5 97		      lda	scorepointers+1
    742  f1b8							; ldy temp1
    743  f1b8		       85 9c		      sta	temp1
    744  f1ba							; sty scorepointers+1
    745  f1ba
    746  f1ba		       a5 99		      lda	scorepointers+3
    747  f1bc							; ldy temp3
    748  f1bc		       85 9e		      sta	temp3
    749  f1be							; sty scorepointers+3
    750  f1be
    751  f1be
    752  f1be		       85 2b		      sta	HMCLR
    753  f1c0		       ba		      tsx
    754  f1c1		       86 f6		      stx	stack1
    755  f1c3		       a2 e0		      ldx	#$E0
    756  f1c5		       86 20		      stx	HMP0
    757  f1c7
    758  f1c7		       a5 a3		      LDA	scorecolor
    759  f1c9		       85 06		      STA	COLUP0
    760  f1cb		       85 07		      STA	COLUP1
    761  f1cd					      ifconst	scorefade
    762  f1cd		       85 f7		      STA	stack2
    763  f1cf					      endif
    764  f1cf				  -	      ifconst	pfscore
    765  f1cf				  -	      lda	pfscorecolor
    766  f1cf				  -	      sta	COLUPF
    767  f1cf					      endif
    768  f1cf		       85 02		      sta	WSYNC
    769  f1d1		       a2 00		      ldx	#0
    770  f1d3		       86 1b		      STx	GRP0
    771  f1d5		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d7
    773  f1d7		       a5 9b		      lda	scorepointers+5
    774  f1d9							; ldy temp5
    775  f1d9		       95 a0		      sta	temp5,x
    776  f1db							; sty scorepointers+5
    777  f1db		       a9 ff		      lda	#>scoretable
    778  f1dd		       85 97		      sta	scorepointers+1
    779  f1df		       85 99		      sta	scorepointers+3
    780  f1e1		       85 9b		      sta	scorepointers+5
    781  f1e3		       85 9d		      sta	temp2
    782  f1e5		       85 9f		      sta	temp4
    783  f1e7		       85 a1		      sta	temp6
    784  f1e9		       a0 07		      LDY	#7
    785  f1eb		       84 25		      STY	VDELP0
    786  f1ed		       85 10		      STA	RESP0
    787  f1ef		       85 11		      STA	RESP1
    788  f1f1
    789  f1f1
    790  f1f1		       a9 03		      LDA	#$03
    791  f1f3		       85 04		      STA	NUSIZ0
    792  f1f5		       85 05		      STA	NUSIZ1
    793  f1f7		       85 26		      STA	VDELP1
    794  f1f9		       a9 f0		      LDA	#$F0
    795  f1fb		       85 21		      STA	HMP1
    796  f1fd		       b1 96		      lda	(scorepointers),y
    797  f1ff		       85 1b		      sta	GRP0
    798  f201		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f203		       4c 0d f2 	      jmp	beginscore
    800  f206
    801  f206
    802  f206				  -	      if	((<*)>$d4)
    803  f206				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f206					      endif
    805  f206
    806  f206				   loop2
    807  f206		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f208		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20a				  -	      ifconst	pfscore
    810  f20a				  -	      lda.w	pfscore1
    811  f20a				  -	      sta	PF1
    812  f20a					      else
    813  f20a					      ifconst	scorefade
      0  f20a					      sleep	2
      1  f20a				   .CYCLES    SET	2
      2  f20a
      3  f20a				  -	      IF	.CYCLES < 2
      4  f20a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20a				  -	      ERR
      6  f20a					      ENDIF
      7  f20a
      8  f20a				  -	      IF	.CYCLES & 1
      9  f20a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20a				  -	      nop	0
     11  f20a				  -	      ELSE
     12  f20a				  -	      bit	VSYNC
     13  f20a				  -	      ENDIF
     14  f20a				  -.CYCLES    SET	.CYCLES - 3
     15  f20a					      ENDIF
     16  f20a
     17  f20a					      REPEAT	.CYCLES / 2
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    815  f20b		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
    816  f20d				  -	      else
    817  f20d				  -	      sleep	7
    818  f20d					      endif
    819  f20d					      endif
    820  f20d							; cycle 0
    821  f20d				   beginscore
    822  f20d		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20f		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f211		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f213		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f215		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f217		       9a		      txs
    828  f218		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21a					      ifconst	scorefade
    830  f21a		       a5 f7		      lda	stack2
    831  f21c				  -	      else
    832  f21c				  -	      sleep	3
    833  f21c					      endif
    834  f21c
    835  f21c				  -	      ifconst	pfscore
    836  f21c				  -	      lda	pfscore2
    837  f21c				  -	      sta	PF1
    838  f21c					      else
    839  f21c					      ifconst	scorefade
    840  f21c		       85 06		      sta	COLUP0
    841  f21e		       85 07		      sta	COLUP1
    842  f220				  -	      else
    843  f220				  -	      sleep	6
    844  f220					      endif
    845  f220					      endif
    846  f220
    847  f220		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f222		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f224		       ba		      tsx
    850  f225		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f227		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f229		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22b		       88		      dey
    854  f22c		       10 d8		      bpl	loop2	;+2 60 180
    855  f22e
    856  f22e		       a6 f6		      ldx	stack1
    857  f230		       9a		      txs
    858  f231							; lda scorepointers+1
    859  f231		       a4 9c		      ldy	temp1
    860  f233							; sta temp1
    861  f233		       84 97		      sty	scorepointers+1
    862  f235
    863  f235		       a9 00		      LDA	#0
    864  f237		       85 0e		      sta	PF1
    865  f239		       85 1b		      STA	GRP0
    866  f23b		       85 1c		      STA	GRP1
    867  f23d		       85 25		      STA	VDELP0
    868  f23f		       85 26		      STA	VDELP1	;do we need these
    869  f241		       85 04		      STA	NUSIZ0
    870  f243		       85 05		      STA	NUSIZ1
    871  f245
    872  f245							; lda scorepointers+3
    873  f245		       a4 9e		      ldy	temp3
    874  f247							; sta temp3
    875  f247		       84 99		      sty	scorepointers+3
    876  f249
    877  f249							; lda scorepointers+5
    878  f249		       a4 a0		      ldy	temp5
    879  f24b							; sta temp5
    880  f24b		       84 9b		      sty	scorepointers+5
    881  f24d					      endif		;noscore
    882  f24d				  -	      ifconst	readpaddle
    883  f24d				  -	      lda	#%11000010
    884  f24d					      else
    885  f24d				  -	      ifconst	qtcontroller
    886  f24d				  -	      lda	qtcontroller
    887  f24d				  -	      lsr		; bit 0 in carry
    888  f24d				  -	      lda	#4
    889  f24d				  -	      ror		; carry into top of A
    890  f24d					      else
    891  f24d		       a9 02		      lda	#2
    892  f24f					      endif		; qtcontroller
    893  f24f					      endif		; readpaddle
    894  f24f		       85 02		      sta	WSYNC
    895  f251		       85 01		      sta	VBLANK
      0  f253					      RETURN
      1  f253					      ifnconst	bankswitch
      2  f253		       60		      rts
      3  f254				  -	      else
      4  f254				  -	      jmp	BS_return
      5  f254					      endif
    897  f254				  -	      ifconst	shakescreen
    898  f254				  -doshakescreen
    899  f254				  -	      bit	shakescreen
    900  f254				  -	      bmi	noshakescreen
    901  f254				  -	      sta	WSYNC
    902  f254				  -noshakescreen
    903  f254				  -	      ldx	missile0height
    904  f254				  -	      inx
    905  f254				  -	      rts
    906  f254					      endif
    907  f254
    908  f254							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f254
    910  f254							; playfield drawing routines
    911  f254							; you get a 32x12 bitmapped display in a single color :)
    912  f254							; 0-31 and 0-11
    913  f254
    914  f254				   pfclear		; clears playfield - or fill with pattern
    915  f254				  -	      ifconst	pfres
    916  f254				  -	      ldx	#pfres*pfwidth-1
    917  f254					      else
    918  f254		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f256					      endif
    920  f256				   pfclear_loop
    921  f256					      ifnconst	superchip
    922  f256		       95 a4		      sta	playfield,x
    923  f258				  -	      else
    924  f258				  -	      sta	playfield-128,x
    925  f258					      endif
    926  f258		       ca		      dex
    927  f259		       10 fb		      bpl	pfclear_loop
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    929  f25c
    930  f25c				   setuppointers
    931  f25c		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25e		       aa		      tax		; put x-value in x 
    933  f25f		       4a		      lsr
    934  f260		       4a		      lsr
    935  f261		       4a		      lsr		; divide x pos by 8 
    936  f262		       85 9c		      sta	temp1
    937  f264		       98		      tya
    938  f265		       0a		      asl
    939  f266					      if	pfwidth=4
    940  f266		       0a		      asl		; multiply y pos by 4
    941  f267					      endif		; else multiply by 2
    942  f267		       18		      clc
    943  f268		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26a		       a8		      tay		; put the value in y
    945  f26b		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26d		       60		      rts
    947  f26e
    948  f26e				   pfread
    949  f26e							;x=xvalue, y=yvalue
    950  f26e		       20 5c f2 	      jsr	setuppointers
    951  f271		       bd d6 f2 	      lda	setbyte,x
    952  f274		       39 a4 00 	      and	playfield,y
    953  f277		       5d d6 f2 	      eor	setbyte,x
    954  f27a							; beq readzero
    955  f27a							; lda #1
    956  f27a							; readzero
      0  f27a					      RETURN
      1  f27a					      ifnconst	bankswitch
      2  f27a		       60		      rts
      3  f27b				  -	      else
      4  f27b				  -	      jmp	BS_return
      5  f27b					      endif
    958  f27b
    959  f27b				   pfpixel
    960  f27b							;x=xvalue, y=yvalue, a=0,1,2
    961  f27b		       20 5c f2 	      jsr	setuppointers
    962  f27e
    963  f27e				  -	      ifconst	bankswitch
    964  f27e				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27e				  -	      beq	pixelon_r	; if "on" go to on
    966  f27e				  -	      lsr
    967  f27e				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27e				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27e				  -	      eor	setbyte,x
    970  f27e				  -	      ifconst	superchip
    971  f27e				  -	      sta	playfield-128,y
    972  f27e				  -	      else
    973  f27e				  -	      sta	playfield,y
    974  f27e				  -	      endif
    975  f27e				  -	      RETURN
    976  f27e				  -pixelon_r
    977  f27e				  -	      lda	playfield,y
    978  f27e				  -	      ora	setbyte,x
    979  f27e				  -	      ifconst	superchip
    980  f27e				  -	      sta	playfield-128,y
    981  f27e				  -	      else
    982  f27e				  -	      sta	playfield,y
    983  f27e				  -	      endif
    984  f27e				  -	      RETURN
    985  f27e				  -pixeloff_r
    986  f27e				  -	      lda	setbyte,x
    987  f27e				  -	      eor	#$ff
    988  f27e				  -	      and	playfield,y
    989  f27e				  -	      ifconst	superchip
    990  f27e				  -	      sta	playfield-128,y
    991  f27e				  -	      else
    992  f27e				  -	      sta	playfield,y
    993  f27e				  -	      endif
    994  f27e				  -	      RETURN
    995  f27e				  -
    996  f27e					      else
    997  f27e		       4c af f2 	      jmp	plotpoint
    998  f281					      endif
    999  f281
   1000  f281				   pfhline
   1001  f281							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f281		       20 5c f2 	      jsr	setuppointers
   1003  f284		       4c 8e f2 	      jmp	noinc
   1004  f287				   keepgoing
   1005  f287		       e8		      inx
   1006  f288		       8a		      txa
   1007  f289		       29 07		      and	#7
   1008  f28b		       d0 01		      bne	noinc
   1009  f28d		       c8		      iny
   1010  f28e				   noinc
   1011  f28e		       20 af f2 	      jsr	plotpoint
   1012  f291		       e4 9e		      cpx	temp3
   1013  f293		       30 f2		      bmi	keepgoing
      0  f295					      RETURN
      1  f295					      ifnconst	bankswitch
      2  f295		       60		      rts
      3  f296				  -	      else
      4  f296				  -	      jmp	BS_return
      5  f296					      endif
   1015  f296
   1016  f296				   pfvline
   1017  f296							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f296		       20 5c f2 	      jsr	setuppointers
   1019  f299		       84 9c		      sty	temp1	; store memory location offset
   1020  f29b		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f29d		       a5 9e		      lda	temp3
   1022  f29f		       0a		      asl
   1023  f2a0					      if	pfwidth=4
   1024  f2a0		       0a		      asl		; multiply by 4
   1025  f2a1					      endif		; else multiply by 2
   1026  f2a1		       85 9e		      sta	temp3	; store it
   1027  f2a3							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a3							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a3							; x should equal original x value
   1030  f2a3				   keepgoingy
   1031  f2a3		       20 af f2 	      jsr	plotpoint
   1032  f2a6		       c8		      iny
   1033  f2a7		       c8		      iny
   1034  f2a8					      if	pfwidth=4
   1035  f2a8		       c8		      iny
   1036  f2a9		       c8		      iny
   1037  f2aa					      endif
   1038  f2aa		       c4 9e		      cpy	temp3
   1039  f2ac		       30 f5		      bmi	keepgoingy
      0  f2ae					      RETURN
      1  f2ae					      ifnconst	bankswitch
      2  f2ae		       60		      rts
      3  f2af				  -	      else
      4  f2af				  -	      jmp	BS_return
      5  f2af					      endif
   1041  f2af
   1042  f2af				   plotpoint
   1043  f2af		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b1		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b3		       4a		      lsr
   1046  f2b4		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b6		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b9		       5d d6 f2 	      eor	setbyte,x
   1049  f2bc				  -	      ifconst	superchip
   1050  f2bc				  -	      sta	playfield-128,y
   1051  f2bc					      else
   1052  f2bc		       99 a4 00 	      sta	playfield,y
   1053  f2bf					      endif
   1054  f2bf		       60		      rts
   1055  f2c0				   pixelon
   1056  f2c0		       b9 a4 00 	      lda	playfield,y
   1057  f2c3		       1d d6 f2 	      ora	setbyte,x
   1058  f2c6				  -	      ifconst	superchip
   1059  f2c6				  -	      sta	playfield-128,y
   1060  f2c6					      else
   1061  f2c6		       99 a4 00 	      sta	playfield,y
   1062  f2c9					      endif
   1063  f2c9		       60		      rts
   1064  f2ca				   pixeloff
   1065  f2ca		       bd d6 f2 	      lda	setbyte,x
   1066  f2cd		       49 ff		      eor	#$ff
   1067  f2cf		       39 a4 00 	      and	playfield,y
   1068  f2d2				  -	      ifconst	superchip
   1069  f2d2				  -	      sta	playfield-128,y
   1070  f2d2					      else
   1071  f2d2		       99 a4 00 	      sta	playfield,y
   1072  f2d5					      endif
   1073  f2d5		       60		      rts
   1074  f2d6
   1075  f2d6				   setbyte
   1076  f2d6					      ifnconst	pfcenter
   1077  f2d6		       80		      .byte.b	$80
   1078  f2d7		       40		      .byte.b	$40
   1079  f2d8		       20		      .byte.b	$20
   1080  f2d9		       10		      .byte.b	$10
   1081  f2da		       08		      .byte.b	$08
   1082  f2db		       04		      .byte.b	$04
   1083  f2dc		       02		      .byte.b	$02
   1084  f2dd		       01		      .byte.b	$01
   1085  f2de					      endif
   1086  f2de		       01		      .byte.b	$01
   1087  f2df		       02		      .byte.b	$02
   1088  f2e0		       04		      .byte.b	$04
   1089  f2e1		       08		      .byte.b	$08
   1090  f2e2		       10		      .byte.b	$10
   1091  f2e3		       20		      .byte.b	$20
   1092  f2e4		       40		      .byte.b	$40
   1093  f2e5		       80		      .byte.b	$80
   1094  f2e6		       80		      .byte.b	$80
   1095  f2e7		       40		      .byte.b	$40
   1096  f2e8		       20		      .byte.b	$20
   1097  f2e9		       10		      .byte.b	$10
   1098  f2ea		       08		      .byte.b	$08
   1099  f2eb		       04		      .byte.b	$04
   1100  f2ec		       02		      .byte.b	$02
   1101  f2ed		       01		      .byte.b	$01
   1102  f2ee		       01		      .byte.b	$01
   1103  f2ef		       02		      .byte.b	$02
   1104  f2f0		       04		      .byte.b	$04
   1105  f2f1		       08		      .byte.b	$08
   1106  f2f2		       10		      .byte.b	$10
   1107  f2f3		       20		      .byte.b	$20
   1108  f2f4		       40		      .byte.b	$40
   1109  f2f5		       80		      .byte.b	$80
   1110  f2f6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f6
   1112  f2f6				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f6		       d0 13		      bne	notleft
   1114  f2f8							;left
   1115  f2f8				  -	      ifconst	pfres
   1116  f2f8				  -	      ldx	#pfres*4
   1117  f2f8					      else
   1118  f2f8		       a2 30		      ldx	#48
   1119  f2fa					      endif
   1120  f2fa				   leftloop
   1121  f2fa		       b5 a3		      lda	playfield-1,x
   1122  f2fc		       4a		      lsr
   1123  f2fd
   1124  f2fd				  -	      ifconst	superchip
   1125  f2fd				  -	      lda	playfield-2,x
   1126  f2fd				  -	      rol
   1127  f2fd				  -	      sta	playfield-130,x
   1128  f2fd				  -	      lda	playfield-3,x
   1129  f2fd				  -	      ror
   1130  f2fd				  -	      sta	playfield-131,x
   1131  f2fd				  -	      lda	playfield-4,x
   1132  f2fd				  -	      rol
   1133  f2fd				  -	      sta	playfield-132,x
   1134  f2fd				  -	      lda	playfield-1,x
   1135  f2fd				  -	      ror
   1136  f2fd				  -	      sta	playfield-129,x
   1137  f2fd					      else
   1138  f2fd		       36 a2		      rol	playfield-2,x
   1139  f2ff		       76 a1		      ror	playfield-3,x
   1140  f301		       36 a0		      rol	playfield-4,x
   1141  f303		       76 a3		      ror	playfield-1,x
   1142  f305					      endif
   1143  f305
   1144  f305		       8a		      txa
   1145  f306		       cb 04		      sbx	#4
   1146  f308		       d0 f0		      bne	leftloop
      0  f30a					      RETURN
      1  f30a					      ifnconst	bankswitch
      2  f30a		       60		      rts
      3  f30b				  -	      else
      4  f30b				  -	      jmp	BS_return
      5  f30b					      endif
   1148  f30b
   1149  f30b				   notleft
   1150  f30b		       4a		      lsr
   1151  f30c		       90 13		      bcc	notright
   1152  f30e							;right
   1153  f30e
   1154  f30e				  -	      ifconst	pfres
   1155  f30e				  -	      ldx	#pfres*4
   1156  f30e					      else
   1157  f30e		       a2 30		      ldx	#48
   1158  f310					      endif
   1159  f310				   rightloop
   1160  f310		       b5 a0		      lda	playfield-4,x
   1161  f312		       4a		      lsr
   1162  f313				  -	      ifconst	superchip
   1163  f313				  -	      lda	playfield-3,x
   1164  f313				  -	      rol
   1165  f313				  -	      sta	playfield-131,x
   1166  f313				  -	      lda	playfield-2,x
   1167  f313				  -	      ror
   1168  f313				  -	      sta	playfield-130,x
   1169  f313				  -	      lda	playfield-1,x
   1170  f313				  -	      rol
   1171  f313				  -	      sta	playfield-129,x
   1172  f313				  -	      lda	playfield-4,x
   1173  f313				  -	      ror
   1174  f313				  -	      sta	playfield-132,x
   1175  f313					      else
   1176  f313		       36 a1		      rol	playfield-3,x
   1177  f315		       76 a2		      ror	playfield-2,x
   1178  f317		       36 a3		      rol	playfield-1,x
   1179  f319		       76 a0		      ror	playfield-4,x
   1180  f31b					      endif
   1181  f31b		       8a		      txa
   1182  f31c		       cb 04		      sbx	#4
   1183  f31e		       d0 f0		      bne	rightloop
      0  f320					      RETURN
      1  f320					      ifnconst	bankswitch
      2  f320		       60		      rts
      3  f321				  -	      else
      4  f321				  -	      jmp	BS_return
      5  f321					      endif
   1185  f321
   1186  f321				   notright
   1187  f321		       4a		      lsr
   1188  f322		       90 49		      bcc	notup
   1189  f324							;up
   1190  f324		       4a		      lsr
   1191  f325		       90 02		      bcc	onedecup
   1192  f327		       c6 ef		      dec	playfieldpos
   1193  f329				   onedecup
   1194  f329		       c6 ef		      dec	playfieldpos
   1195  f32b		       f0 02		      beq	shiftdown
   1196  f32d		       10 3d		      bpl	noshiftdown2
   1197  f32f				   shiftdown
   1198  f32f				  -	      ifconst	pfrowheight
   1199  f32f				  -	      lda	#pfrowheight
   1200  f32f					      else
   1201  f32f					      ifnconst	pfres
   1202  f32f		       a9 08		      lda	#8
   1203  f331				  -	      else
   1204  f331				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f331					      endif
   1206  f331					      endif
   1207  f331
   1208  f331		       85 ef		      sta	playfieldpos
   1209  f333		       a5 a7		      lda	playfield+3
   1210  f335		       85 9f		      sta	temp4
   1211  f337		       a5 a6		      lda	playfield+2
   1212  f339		       85 9e		      sta	temp3
   1213  f33b		       a5 a5		      lda	playfield+1
   1214  f33d		       85 9d		      sta	temp2
   1215  f33f		       a5 a4		      lda	playfield
   1216  f341		       85 9c		      sta	temp1
   1217  f343		       a2 00		      ldx	#0
   1218  f345				   up2
   1219  f345		       b5 a8		      lda	playfield+4,x
   1220  f347				  -	      ifconst	superchip
   1221  f347				  -	      sta	playfield-128,x
   1222  f347				  -	      lda	playfield+5,x
   1223  f347				  -	      sta	playfield-127,x
   1224  f347				  -	      lda	playfield+6,x
   1225  f347				  -	      sta	playfield-126,x
   1226  f347				  -	      lda	playfield+7,x
   1227  f347				  -	      sta	playfield-125,x
   1228  f347					      else
   1229  f347		       95 a4		      sta	playfield,x
   1230  f349		       b5 a9		      lda	playfield+5,x
   1231  f34b		       95 a5		      sta	playfield+1,x
   1232  f34d		       b5 aa		      lda	playfield+6,x
   1233  f34f		       95 a6		      sta	playfield+2,x
   1234  f351		       b5 ab		      lda	playfield+7,x
   1235  f353		       95 a7		      sta	playfield+3,x
   1236  f355					      endif
   1237  f355		       8a		      txa
   1238  f356		       cb fc		      sbx	#252
   1239  f358				  -	      ifconst	pfres
   1240  f358				  -	      cpx	#(pfres-1)*4
   1241  f358					      else
   1242  f358		       e0 2c		      cpx	#44
   1243  f35a					      endif
   1244  f35a		       d0 e9		      bne	up2
   1245  f35c
   1246  f35c		       a5 9f		      lda	temp4
   1247  f35e
   1248  f35e				  -	      ifconst	superchip
   1249  f35e				  -	      ifconst	pfres
   1250  f35e				  -	      sta	playfield+pfres*4-129
   1251  f35e				  -	      lda	temp3
   1252  f35e				  -	      sta	playfield+pfres*4-130
   1253  f35e				  -	      lda	temp2
   1254  f35e				  -	      sta	playfield+pfres*4-131
   1255  f35e				  -	      lda	temp1
   1256  f35e				  -	      sta	playfield+pfres*4-132
   1257  f35e				  -	      else
   1258  f35e				  -	      sta	playfield+47-128
   1259  f35e				  -	      lda	temp3
   1260  f35e				  -	      sta	playfield+46-128
   1261  f35e				  -	      lda	temp2
   1262  f35e				  -	      sta	playfield+45-128
   1263  f35e				  -	      lda	temp1
   1264  f35e				  -	      sta	playfield+44-128
   1265  f35e				  -	      endif
   1266  f35e					      else
   1267  f35e				  -	      ifconst	pfres
   1268  f35e				  -	      sta	playfield+pfres*4-1
   1269  f35e				  -	      lda	temp3
   1270  f35e				  -	      sta	playfield+pfres*4-2
   1271  f35e				  -	      lda	temp2
   1272  f35e				  -	      sta	playfield+pfres*4-3
   1273  f35e				  -	      lda	temp1
   1274  f35e				  -	      sta	playfield+pfres*4-4
   1275  f35e					      else
   1276  f35e		       85 d3		      sta	playfield+47
   1277  f360		       a5 9e		      lda	temp3
   1278  f362		       85 d2		      sta	playfield+46
   1279  f364		       a5 9d		      lda	temp2
   1280  f366		       85 d1		      sta	playfield+45
   1281  f368		       a5 9c		      lda	temp1
   1282  f36a		       85 d0		      sta	playfield+44
   1283  f36c					      endif
   1284  f36c					      endif
   1285  f36c				   noshiftdown2
      0  f36c					      RETURN
      1  f36c					      ifnconst	bankswitch
      2  f36c		       60		      rts
      3  f36d				  -	      else
      4  f36d				  -	      jmp	BS_return
      5  f36d					      endif
   1287  f36d
   1288  f36d
   1289  f36d				   notup
   1290  f36d							;down
   1291  f36d		       4a		      lsr
   1292  f36e		       b0 02		      bcs	oneincup
   1293  f370		       e6 ef		      inc	playfieldpos
   1294  f372				   oneincup
   1295  f372		       e6 ef		      inc	playfieldpos
   1296  f374		       a5 ef		      lda	playfieldpos
   1297  f376
   1298  f376				  -	      ifconst	pfrowheight
   1299  f376				  -	      cmp	#pfrowheight+1
   1300  f376					      else
   1301  f376					      ifnconst	pfres
   1302  f376		       c9 09		      cmp	#9
   1303  f378				  -	      else
   1304  f378				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f378					      endif
   1306  f378					      endif
   1307  f378
   1308  f378		       90 3b		      bcc	noshiftdown
   1309  f37a		       a9 01		      lda	#1
   1310  f37c		       85 ef		      sta	playfieldpos
   1311  f37e
   1312  f37e				  -	      ifconst	pfres
   1313  f37e				  -	      lda	playfield+pfres*4-1
   1314  f37e				  -	      sta	temp4
   1315  f37e				  -	      lda	playfield+pfres*4-2
   1316  f37e				  -	      sta	temp3
   1317  f37e				  -	      lda	playfield+pfres*4-3
   1318  f37e				  -	      sta	temp2
   1319  f37e				  -	      lda	playfield+pfres*4-4
   1320  f37e					      else
   1321  f37e		       a5 d3		      lda	playfield+47
   1322  f380		       85 9f		      sta	temp4
   1323  f382		       a5 d2		      lda	playfield+46
   1324  f384		       85 9e		      sta	temp3
   1325  f386		       a5 d1		      lda	playfield+45
   1326  f388		       85 9d		      sta	temp2
   1327  f38a		       a5 d0		      lda	playfield+44
   1328  f38c					      endif
   1329  f38c
   1330  f38c		       85 9c		      sta	temp1
   1331  f38e
   1332  f38e				  -	      ifconst	pfres
   1333  f38e				  -	      ldx	#(pfres-1)*4
   1334  f38e					      else
   1335  f38e		       a2 2c		      ldx	#44
   1336  f390					      endif
   1337  f390				   down2
   1338  f390		       b5 a3		      lda	playfield-1,x
   1339  f392				  -	      ifconst	superchip
   1340  f392				  -	      sta	playfield-125,x
   1341  f392				  -	      lda	playfield-2,x
   1342  f392				  -	      sta	playfield-126,x
   1343  f392				  -	      lda	playfield-3,x
   1344  f392				  -	      sta	playfield-127,x
   1345  f392				  -	      lda	playfield-4,x
   1346  f392				  -	      sta	playfield-128,x
   1347  f392					      else
   1348  f392		       95 a7		      sta	playfield+3,x
   1349  f394		       b5 a2		      lda	playfield-2,x
   1350  f396		       95 a6		      sta	playfield+2,x
   1351  f398		       b5 a1		      lda	playfield-3,x
   1352  f39a		       95 a5		      sta	playfield+1,x
   1353  f39c		       b5 a0		      lda	playfield-4,x
   1354  f39e		       95 a4		      sta	playfield,x
   1355  f3a0					      endif
   1356  f3a0		       8a		      txa
   1357  f3a1		       cb 04		      sbx	#4
   1358  f3a3		       d0 eb		      bne	down2
   1359  f3a5
   1360  f3a5		       a5 9f		      lda	temp4
   1361  f3a7				  -	      ifconst	superchip
   1362  f3a7				  -	      sta	playfield-125
   1363  f3a7				  -	      lda	temp3
   1364  f3a7				  -	      sta	playfield-126
   1365  f3a7				  -	      lda	temp2
   1366  f3a7				  -	      sta	playfield-127
   1367  f3a7				  -	      lda	temp1
   1368  f3a7				  -	      sta	playfield-128
   1369  f3a7					      else
   1370  f3a7		       85 a7		      sta	playfield+3
   1371  f3a9		       a5 9e		      lda	temp3
   1372  f3ab		       85 a6		      sta	playfield+2
   1373  f3ad		       a5 9d		      lda	temp2
   1374  f3af		       85 a5		      sta	playfield+1
   1375  f3b1		       a5 9c		      lda	temp1
   1376  f3b3		       85 a4		      sta	playfield
   1377  f3b5					      endif
   1378  f3b5				   noshiftdown
      0  f3b5					      RETURN
      1  f3b5					      ifnconst	bankswitch
      2  f3b5		       60		      rts
      3  f3b6				  -	      else
      4  f3b6				  -	      jmp	BS_return
      5  f3b6					      endif
   1380  f3b6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b6
   1382  f3b6							;standard routines needed for pretty much all games
   1383  f3b6							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b6							; repositioning code and score pointer setup moved to overscan
   1385  f3b6							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b6
   1387  f3b6				   randomize
   1388  f3b6		       a5 a2		      lda	rand
   1389  f3b8		       4a		      lsr
   1390  f3b9					      ifconst	rand16
   1391  f3b9		       26 e5		      rol	rand16
   1392  f3bb					      endif
   1393  f3bb		       90 02		      bcc	noeor
   1394  f3bd		       49 b4		      eor	#$B4
   1395  f3bf				   noeor
   1396  f3bf		       85 a2		      sta	rand
   1397  f3c1					      ifconst	rand16
   1398  f3c1		       45 e5		      eor	rand16
   1399  f3c3					      endif
      0  f3c3					      RETURN
      1  f3c3					      ifnconst	bankswitch
      2  f3c3		       60		      rts
      3  f3c4				  -	      else
      4  f3c4				  -	      jmp	BS_return
      5  f3c4					      endif
   1401  f3c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c4
   1403  f3c4				   drawscreen
   1404  f3c4				  -	      ifconst	debugscore
   1405  f3c4				  -	      ldx	#14
   1406  f3c4				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c4				  -
   1408  f3c4				  -	      ifconst	mincycles
   1409  f3c4				  -	      lda	mincycles
   1410  f3c4				  -	      cmp	INTIM
   1411  f3c4				  -	      lda	mincycles
   1412  f3c4				  -	      bcc	nochange
   1413  f3c4				  -	      lda	INTIM
   1414  f3c4				  -	      sta	mincycles
   1415  f3c4				  -nochange
   1416  f3c4				  -	      endif
   1417  f3c4				  -
   1418  f3c4				  -			; cmp #$2B
   1419  f3c4				  -			; bcs no_cycles_left
   1420  f3c4				  -	      bmi	cycles_left
   1421  f3c4				  -	      ldx	#64
   1422  f3c4				  -	      eor	#$ff	;make negative
   1423  f3c4				  -cycles_left
   1424  f3c4				  -	      stx	scorecolor
   1425  f3c4				  -	      and	#$7f	; clear sign bit
   1426  f3c4				  -	      tax
   1427  f3c4				  -	      lda	scorebcd,x
   1428  f3c4				  -	      sta	score+2
   1429  f3c4				  -	      lda	scorebcd1,x
   1430  f3c4				  -	      sta	score+1
   1431  f3c4				  -	      jmp	done_debugscore
   1432  f3c4				  -scorebcd
   1433  f3c4				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c4				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c4				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c4				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c4				  -scorebcd1
   1438  f3c4				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c4				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c4				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c4				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c4				  -done_debugscore
   1443  f3c4					      endif
   1444  f3c4
   1445  f3c4				  -	      ifconst	debugcycles
   1446  f3c4				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c4				  -			; cmp #$2B
   1448  f3c4				  -			; BCC overscan
   1449  f3c4				  -	      bmi	overscan
   1450  f3c4				  -	      sta	COLUBK
   1451  f3c4				  -	      bcs	doneoverscan
   1452  f3c4					      endif
   1453  f3c4
   1454  f3c4				   overscan
   1455  f3c4				  -	      ifconst	interlaced
   1456  f3c4				  -	      PHP
   1457  f3c4				  -	      PLA
   1458  f3c4				  -	      EOR	#4	; flip interrupt bit
   1459  f3c4				  -	      PHA
   1460  f3c4				  -	      PLP
   1461  f3c4				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c4				  -	      TAX		; save it for later
   1463  f3c4					      endif
   1464  f3c4
   1465  f3c4				   overscanloop
   1466  f3c4		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c7		       30 fb		      bmi	overscanloop
   1468  f3c9				   doneoverscan
   1469  f3c9
   1470  f3c9							;do VSYNC
   1471  f3c9
   1472  f3c9				  -	      ifconst	interlaced
   1473  f3c9				  -	      CPX	#4
   1474  f3c9				  -	      BNE	oddframevsync
   1475  f3c9					      endif
   1476  f3c9
   1477  f3c9		       a9 02		      lda	#2
   1478  f3cb		       85 02		      sta	WSYNC
   1479  f3cd		       85 00		      sta	VSYNC
   1480  f3cf		       85 02		      STA	WSYNC
   1481  f3d1		       85 02		      STA	WSYNC
   1482  f3d3		       4a		      lsr
   1483  f3d4		       85 02		      STA	WSYNC
   1484  f3d6		       85 00		      STA	VSYNC
   1485  f3d8		       85 01		      sta	VBLANK
   1486  f3da				  -	      ifnconst	overscan_time
   1487  f3da				  -	      lda	#37+128
   1488  f3da					      else
   1489  f3da		       a9 a5		      lda	#overscan_time+128
   1490  f3dc					      endif
   1491  f3dc		       8d 96 02 	      sta	TIM64T
   1492  f3df
   1493  f3df				  -	      ifconst	interlaced
   1494  f3df				  -	      jmp	postsync
   1495  f3df				  -
   1496  f3df				  -oddframevsync
   1497  f3df				  -	      sta	WSYNC
   1498  f3df				  -
   1499  f3df				  -	      LDA	($80,X)	; 11 waste
   1500  f3df				  -	      LDA	($80,X)	; 11 waste
   1501  f3df				  -	      LDA	($80,X)	; 11 waste
   1502  f3df				  -
   1503  f3df				  -	      lda	#2
   1504  f3df				  -	      sta	VSYNC
   1505  f3df				  -	      sta	WSYNC
   1506  f3df				  -	      sta	WSYNC
   1507  f3df				  -	      sta	WSYNC
   1508  f3df				  -
   1509  f3df				  -	      LDA	($80,X)	; 11 waste
   1510  f3df				  -	      LDA	($80,X)	; 11 waste
   1511  f3df				  -	      LDA	($80,X)	; 11 waste
   1512  f3df				  -
   1513  f3df				  -	      lda	#0
   1514  f3df				  -	      sta	VSYNC
   1515  f3df				  -	      sta	VBLANK
   1516  f3df				  -	      ifnconst	overscan_time
   1517  f3df				  -	      lda	#37+128
   1518  f3df				  -	      else
   1519  f3df				  -	      lda	#overscan_time+128
   1520  f3df				  -	      endif
   1521  f3df				  -	      sta	TIM64T
   1522  f3df				  -
   1523  f3df				  -postsync
   1524  f3df					      endif
   1525  f3df
   1526  f3df				  -	      ifconst	legacy
   1527  f3df				  -	      if	legacy < 100
   1528  f3df				  -	      ldx	#4
   1529  f3df				  -adjustloop
   1530  f3df				  -	      lda	player0x,x
   1531  f3df				  -	      sec
   1532  f3df				  -	      sbc	#14	;?
   1533  f3df				  -	      sta	player0x,x
   1534  f3df				  -	      dex
   1535  f3df				  -	      bpl	adjustloop
   1536  f3df				  -	      endif
   1537  f3df					      endif
   1538  f3df				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3df				  -	      repeat	($fa-(<*))
   1540  f3df				  -	      nop
   1541  f3df				  -	      repend
   1542  f3df					      endif
   1543  f3df		       85 02		      sta	WSYNC
   1544  f3e1		       a2 04		      ldx	#4
      0  f3e3					      SLEEP	3
      1  f3e3				   .CYCLES    SET	3
      2  f3e3
      3  f3e3				  -	      IF	.CYCLES < 2
      4  f3e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e3				  -	      ERR
      6  f3e3					      ENDIF
      7  f3e3
      8  f3e3					      IF	.CYCLES & 1
      9  f3e3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e3		       04 00		      nop	0
     11  f3e5				  -	      ELSE
     12  f3e5				  -	      bit	VSYNC
     13  f3e5					      ENDIF
     14  f3e5				   .CYCLES    SET	.CYCLES - 3
     15  f3e5					      ENDIF
     16  f3e5
     17  f3e5				  -	      REPEAT	.CYCLES / 2
     18  f3e5				  -	      nop
     19  f3e5					      REPEND
   1546  f3e5				   HorPosLoop		; 5
   1547  f3e5		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e7		       38		      sec		;+2 11
   1549  f3e8				   DivideLoop
   1550  f3e8		       e9 0f		      sbc	#15
   1551  f3ea		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ec		       95 9c		      sta	temp1,X	;+4 19
   1553  f3ee		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f0		       85 02		      sta	WSYNC
   1555  f3f2		       ca		      dex
   1556  f3f3		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f5							; 4
   1558  f3f5
   1559  f3f5		       a2 04		      ldx	#4
   1560  f3f7		       b4 9c		      ldy	temp1,X
   1561  f3f9		       b9 55 f3 	      lda	repostable-256,Y
   1562  f3fc		       95 20		      sta	HMP0,X	;+14 18
   1563  f3fe
   1564  f3fe		       ca		      dex
   1565  f3ff		       b4 9c		      ldy	temp1,X
   1566  f401		       b9 55 f3 	      lda	repostable-256,Y
   1567  f404		       95 20		      sta	HMP0,X	;+14 32
   1568  f406
   1569  f406		       ca		      dex
   1570  f407		       b4 9c		      ldy	temp1,X
   1571  f409		       b9 55 f3 	      lda	repostable-256,Y
   1572  f40c		       95 20		      sta	HMP0,X	;+14 46
   1573  f40e
   1574  f40e		       ca		      dex
   1575  f40f		       b4 9c		      ldy	temp1,X
   1576  f411		       b9 55 f3 	      lda	repostable-256,Y
   1577  f414		       95 20		      sta	HMP0,X	;+14 60
   1578  f416
   1579  f416		       ca		      dex
   1580  f417		       b4 9c		      ldy	temp1,X
   1581  f419		       b9 55 f3 	      lda	repostable-256,Y
   1582  f41c		       95 20		      sta	HMP0,X	;+14 74
   1583  f41e
   1584  f41e		       85 02		      sta	WSYNC
   1585  f420
   1586  f420		       85 2a		      sta	HMOVE	;+3 3
   1587  f422
   1588  f422
   1589  f422				  -	      ifconst	legacy
   1590  f422				  -	      if	legacy < 100
   1591  f422				  -	      ldx	#4
   1592  f422				  -adjustloop2
   1593  f422				  -	      lda	player0x,x
   1594  f422				  -	      clc
   1595  f422				  -	      adc	#14	;?
   1596  f422				  -	      sta	player0x,x
   1597  f422				  -	      dex
   1598  f422				  -	      bpl	adjustloop2
   1599  f422				  -	      endif
   1600  f422					      endif
   1601  f422
   1602  f422
   1603  f422
   1604  f422
   1605  f422							;set score pointers
   1606  f422		       a7 95		      lax	score+2
   1607  f424		       20 55 f4 	      jsr	scorepointerset
   1608  f427		       84 9b		      sty	scorepointers+5
   1609  f429		       86 98		      stx	scorepointers+2
   1610  f42b		       a7 94		      lax	score+1
   1611  f42d		       20 55 f4 	      jsr	scorepointerset
   1612  f430		       84 9a		      sty	scorepointers+4
   1613  f432		       86 97		      stx	scorepointers+1
   1614  f434		       a7 93		      lax	score
   1615  f436		       20 55 f4 	      jsr	scorepointerset
   1616  f439		       84 99		      sty	scorepointers+3
   1617  f43b		       86 96		      stx	scorepointers
   1618  f43d
   1619  f43d				   vblk
   1620  f43d							; run possible vblank bB code
   1621  f43d				  -	      ifconst	vblank_bB_code
   1622  f43d				  -	      jsr	vblank_bB_code
   1623  f43d					      endif
   1624  f43d				   vblk2
   1625  f43d		       ad 84 02 	      LDA	INTIM
   1626  f440		       30 fb		      bmi	vblk2
   1627  f442		       4c 34 f0 	      jmp	kernel
   1628  f445
   1629  f445
   1630  f445		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f44e		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f455				   repostable
   1633  f455
   1634  f455				   scorepointerset
   1635  f455		       29 0f		      and	#$0F
   1636  f457		       0a		      asl
   1637  f458		       0a		      asl
   1638  f459		       0a		      asl
   1639  f45a		       69 9c		      adc	#<scoretable
   1640  f45c		       a8		      tay
   1641  f45d		       8a		      txa
   1642  f45e							; and #$F0
   1643  f45e							; lsr
   1644  f45e		       4b f0		      asr	#$F0
   1645  f460		       69 9c		      adc	#<scoretable
   1646  f462		       aa		      tax
   1647  f463		       60		      rts
   1648  f464				   game
   1649  f464				   .L00 		;  rem Generated 19/07/2022 10:00:00 by Visual bB Version 1.0.0.568
   1650  f464
   1651  f464				   .L01 		;  rem ************************************************************
   1652  f464
   1653  f464				   .L02 		;  rem *<Game Name>						   *
   1654  f464
   1655  f464				   .L03 		;  rem *<slogan>						   *
   1656  f464
   1657  f464				   .L04 		;  rem *<Atariando - Guilherme Xavier and Augusto Baffa>		  *
   1658  f464
   1659  f464				   .L05 		;  rem *<guix@puc-rio.br / abaffa@puc-rio.br>			   *
   1660  f464
   1661  f464				   .L06 		;  rem *<free> 						   *
   1662  f464
   1663  f464				   .L07 		;  rem ************************************************************
   1664  f464
   1665  f464				   .
   1666  f464							; 
   1667  f464
   1668  f464				   .L08 		;  set kernel_options pfcolors
   1669  f464
   1670  f464				   .L09 		;  set tv ntsc
   1671  f464
   1672  f464				   .
   1673  f464							; 
   1674  f464
   1675  f464				   .
   1676  f464							; 
   1677  f464
   1678  f464				   .
   1679  f464							; 
   1680  f464
   1681  f464				   .L010		;  const scorefade  =	0
   1682  f464
   1683  f464				   .L011		;  scorecolor	=  $1C
   1684  f464
   1685  f464		       a9 1c		      LDA	#$1C
   1686  f466		       85 a3		      STA	scorecolor
   1687  f468				   .
   1688  f468							; 
   1689  f468
   1690  f468				   .L012		;  dim sounda	=  a
   1691  f468
   1692  f468				   .L013		;  dim soundb	=  b
   1693  f468
   1694  f468				   .L014		;  dim counter  =  c
   1695  f468
   1696  f468				   .L015		;  dim d  =  d
   1697  f468
   1698  f468				   .L016		;  dim e  =  e
   1699  f468
   1700  f468				   .L017		;  dim player0control	=  f
   1701  f468
   1702  f468				   .L018		;  dim meteor_control	=  g
   1703  f468
   1704  f468				   .L019		;  dim h  =  h
   1705  f468
   1706  f468				   .L020		;  dim meteor_impact_position	=  i
   1707  f468
   1708  f468				   .L021		;  dim j  =  j
   1709  f468
   1710  f468				   .L022		;  dim k  =  k
   1711  f468
   1712  f468				   .L023		;  dim l  =  l
   1713  f468
   1714  f468				   .L024		;  dim meteor_speed  =  m
   1715  f468
   1716  f468				   .L025		;  dim n  =  n
   1717  f468
   1718  f468				   .L026		;  dim o  =  o
   1719  f468
   1720  f468				   .L027		;  dim dash_cooldown  =  p
   1721  f468
   1722  f468				   .L028		;  dim q  =  q
   1723  f468
   1724  f468				   .L029		;  dim rand16	=  r
   1725  f468
   1726  f468				   .L030		;  dim statusbarcolor	=  s
   1727  f468
   1728  f468				   .L031		;  dim t  =  t
   1729  f468
   1730  f468				   .L032		;  dim rand_temp  =  u
   1731  f468
   1732  f468				   .L033		;  dim v  =  v
   1733  f468
   1734  f468				   .L034		;  dim meteor_draw_mode  =  w
   1735  f468
   1736  f468				   .L035		;  dim x  =  x
   1737  f468
   1738  f468				   .L036		;  dim y  =  y
   1739  f468
   1740  f468				   .L037		;  dim z  =  z
   1741  f468
   1742  f468				   .L038		;  dim _sc1  =  score
   1743  f468
   1744  f468				   .L039		;  dim _sc2  =  score + 1
   1745  f468
   1746  f468				   .L040		;  dim _sc3  =  score + 2
   1747  f468
   1748  f468				   .
   1749  f468							; 
   1750  f468
   1751  f468				   .L041		;  rem start/restart ........................................................................
   1752  f468
   1753  f468				   .
   1754  f468							; 
   1755  f468
   1756  f468				   .start_restart
   1757  f468							; start_restart
   1758  f468
   1759  f468				   .
   1760  f468							; 
   1761  f468
   1762  f468				   .L042		;  AUDV0  =  0  :  AUDV1  =  0
   1763  f468
   1764  f468		       a9 00		      LDA	#0
   1765  f46a		       85 19		      STA	AUDV0
   1766  f46c		       85 1a		      STA	AUDV1
   1767  f46e				   .L043		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1768  f46e
   1769  f46e		       a9 00		      LDA	#0
   1770  f470		       85 d4		      STA	a
   1771  f472		       85 d5		      STA	b
   1772  f474		       85 d6		      STA	c
   1773  f476		       85 d7		      STA	d
   1774  f478		       85 d8		      STA	e
   1775  f47a		       85 d9		      STA	f
   1776  f47c		       85 da		      STA	g
   1777  f47e		       85 db		      STA	h
   1778  f480		       85 dc		      STA	i
   1779  f482				   .L044		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1780  f482
   1781  f482		       a9 00		      LDA	#0
   1782  f484		       85 dd		      STA	j
   1783  f486		       85 de		      STA	k
   1784  f488		       85 df		      STA	l
   1785  f48a		       85 e0		      STA	m
   1786  f48c		       85 e1		      STA	n
   1787  f48e		       85 e2		      STA	o
   1788  f490		       85 e3		      STA	p
   1789  f492		       85 e4		      STA	q
   1790  f494		       85 e5		      STA	r
   1791  f496				   .L045		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  z  =  0
   1792  f496
   1793  f496		       a9 00		      LDA	#0
   1794  f498		       85 e6		      STA	s
   1795  f49a		       85 e7		      STA	t
   1796  f49c		       85 e8		      STA	u
   1797  f49e		       85 e9		      STA	v
   1798  f4a0		       85 ea		      STA	w
   1799  f4a2		       85 eb		      STA	x
   1800  f4a4		       85 ed		      STA	z
   1801  f4a6				   .L046		;  player0y  =  200  :  player1y  =  200  :  bally  =	200
   1802  f4a6
   1803  f4a6		       a9 c8		      LDA	#200
   1804  f4a8		       85 85		      STA	player0y
   1805  f4aa		       85 86		      STA	player1y
   1806  f4ac		       85 89		      STA	bally
   1807  f4ae				   .
   1808  f4ae							; 
   1809  f4ae
   1810  f4ae				   .L047		;  rem title ........................................................................
   1811  f4ae
   1812  f4ae				   .
   1813  f4ae							; 
   1814  f4ae
   1815  f4ae				   .titlescreen
   1816  f4ae							; titlescreen
   1817  f4ae
   1818  f4ae				   .
   1819  f4ae							; 
   1820  f4ae
   1821  f4ae				   .L048		;  scorecolor	=  $1E
   1822  f4ae
   1823  f4ae		       a9 1e		      LDA	#$1E
   1824  f4b0		       85 a3		      STA	scorecolor
   1825  f4b2				   .
   1826  f4b2							; 
   1827  f4b2
   1828  f4b2				   .L049		;  COLUBK  =  $1C
   1829  f4b2
   1830  f4b2		       a9 1c		      LDA	#$1C
   1831  f4b4		       85 09		      STA	COLUBK
   1832  f4b6				   .
   1833  f4b6							; 
   1834  f4b6
   1835  f4b6				   .L050		;  playfield:
   1836  f4b6
   1837  f4b6				  -	      ifconst	pfres
   1838  f4b6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1839  f4b6					      else
   1840  f4b6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1841  f4b8					      endif
   1842  f4b8		       4c e7 f4 	      jmp	pflabel0
   1843  f4bb				   PF_data0
   1844  f4bb		       00 00		      .byte.b	%00000000, %00000000
   1845  f4bd					      if	(pfwidth>2)
   1846  f4bd		       00 00		      .byte.b	%00000000, %00000000
   1847  f4bf					      endif
   1848  f4bf		       6d dd		      .byte.b	%01101101, %11011101
   1849  f4c1					      if	(pfwidth>2)
   1850  f4c1		       77 00		      .byte.b	%01110111, %00000000
   1851  f4c3					      endif
   1852  f4c3		       55 48		      .byte.b	%01010101, %01001000
   1853  f4c5					      if	(pfwidth>2)
   1854  f4c5		       55 00		      .byte.b	%01010101, %00000000
   1855  f4c7					      endif
   1856  f4c7		       45 c9		      .byte.b	%01000101, %11001001
   1857  f4c9					      if	(pfwidth>2)
   1858  f4c9		       56 00		      .byte.b	%01010110, %00000000
   1859  f4cb					      endif
   1860  f4cb		       45 48		      .byte.b	%01000101, %01001000
   1861  f4cd					      if	(pfwidth>2)
   1862  f4cd		       55 00		      .byte.b	%01010101, %00000000
   1863  f4cf					      endif
   1864  f4cf		       45 c9		      .byte.b	%01000101, %11001001
   1865  f4d1					      if	(pfwidth>2)
   1866  f4d1		       75 00		      .byte.b	%01110101, %00000000
   1867  f4d3					      endif
   1868  f4d3		       00 00		      .byte.b	%00000000, %00000000
   1869  f4d5					      if	(pfwidth>2)
   1870  f4d5		       00 00		      .byte.b	%00000000, %00000000
   1871  f4d7					      endif
   1872  f4d7		       76 22		      .byte.b	%01110110, %00100010
   1873  f4d9					      if	(pfwidth>2)
   1874  f4d9		       00 00		      .byte.b	%00000000, %00000000
   1875  f4db					      endif
   1876  f4db		       69 22		      .byte.b	%01101001, %00100010
   1877  f4dd					      if	(pfwidth>2)
   1878  f4dd		       00 00		      .byte.b	%00000000, %00000000
   1879  f4df					      endif
   1880  f4df		       4f 22		      .byte.b	%01001111, %00100010
   1881  f4e1					      if	(pfwidth>2)
   1882  f4e1		       00 00		      .byte.b	%00000000, %00000000
   1883  f4e3					      endif
   1884  f4e3		       49 ee		      .byte.b	%01001001, %11101110
   1885  f4e5					      if	(pfwidth>2)
   1886  f4e5		       00 00		      .byte.b	%00000000, %00000000
   1887  f4e7					      endif
   1888  f4e7				   pflabel0
   1889  f4e7		       bd bb f4 	      lda	PF_data0,x
   1890  f4ea		       95 a4		      sta	playfield,x
   1891  f4ec		       ca		      dex
   1892  f4ed		       10 f8		      bpl	pflabel0
   1893  f4ef				   .
   1894  f4ef							; 
   1895  f4ef
   1896  f4ef				   .L051		;  pfcolors:
   1897  f4ef
   1898  f4ef		       a9 32		      lda	# $32
   1899  f4f1		       85 08		      sta	COLUPF
   1900  f4f3				  -	      ifconst	pfres
   1901  f4f3				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   1902  f4f3					      else
   1903  f4f3		       a9 f9		      lda	#>(pfcolorlabel13-84)
   1904  f4f5					      endif
   1905  f4f5		       85 f1		      sta	pfcolortable+1
   1906  f4f7				  -	      ifconst	pfres
   1907  f4f7				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   1908  f4f7					      else
   1909  f4f7		       a9 04		      lda	#<(pfcolorlabel13-84)
   1910  f4f9					      endif
   1911  f4f9		       85 f0		      sta	pfcolortable
   1912  f4fb				   .
   1913  f4fb							; 
   1914  f4fb
   1915  f4fb				   .L052		;  drawscreen
   1916  f4fb
   1917  f4fb		       20 c4 f3 	      jsr	drawscreen
   1918  f4fe				   .
   1919  f4fe							; 
   1920  f4fe
   1921  f4fe				   .L053		;  if joy0fire then goto main_setup
   1922  f4fe
   1923  f4fe		       24 0c		      bit	INPT4
   1924  f500		       30 03		      BMI	.skipL053
   1925  f502				   .condpart0
   1926  f502		       4c 08 f5 	      jmp	.main_setup
   1927  f505
   1928  f505				   .skipL053
   1929  f505				   .
   1930  f505							; 
   1931  f505
   1932  f505				   .L054		;  goto titlescreen
   1933  f505
   1934  f505		       4c ae f4 	      jmp	.titlescreen
   1935  f508
   1936  f508				   .
   1937  f508							; 
   1938  f508
   1939  f508				   .L055		;  rem main_setup ........................................................................
   1940  f508
   1941  f508				   .
   1942  f508							; 
   1943  f508
   1944  f508				   .main_setup
   1945  f508							; main_setup
   1946  f508
   1947  f508				   .
   1948  f508							; 
   1949  f508
   1950  f508				   .L056		;  player0x  =  85
   1951  f508
   1952  f508		       a9 55		      LDA	#85
   1953  f50a		       85 80		      STA	player0x
   1954  f50c				   .L057		;  player0y  =  85
   1955  f50c
   1956  f50c		       a9 55		      LDA	#85
   1957  f50e		       85 85		      STA	player0y
   1958  f510				   .
   1959  f510							; 
   1960  f510
   1961  f510				   .L058		;  player1x  =  10
   1962  f510
   1963  f510		       a9 0a		      LDA	#10
   1964  f512		       85 81		      STA	player1x
   1965  f514				   .L059		;  player1y  =  55
   1966  f514
   1967  f514		       a9 37		      LDA	#55
   1968  f516		       85 86		      STA	player1y
   1969  f518				   .
   1970  f518							; 
   1971  f518
   1972  f518				   .L060		;  ballx  =  55
   1973  f518
   1974  f518		       a9 37		      LDA	#55
   1975  f51a		       85 84		      STA	ballx
   1976  f51c				   .L061		;  bally  =  100
   1977  f51c
   1978  f51c		       a9 64		      LDA	#100
   1979  f51e		       85 89		      STA	bally
   1980  f520				   .
   1981  f520							; 
   1982  f520
   1983  f520				   .L062		;  j  =  1
   1984  f520
   1985  f520		       a9 01		      LDA	#1
   1986  f522		       85 dd		      STA	j
   1987  f524				   .L063		;  k  =  0
   1988  f524
   1989  f524		       a9 00		      LDA	#0
   1990  f526		       85 de		      STA	k
   1991  f528				   .L064		;  meteor_speed  =  2
   1992  f528
   1993  f528		       a9 02		      LDA	#2
   1994  f52a		       85 e0		      STA	meteor_speed
   1995  f52c				   .
   1996  f52c							; 
   1997  f52c
   1998  f52c				   .L065		;  dash_cooldown  =  0
   1999  f52c
   2000  f52c		       a9 00		      LDA	#0
   2001  f52e		       85 e3		      STA	dash_cooldown
   2002  f530				   .
   2003  f530							; 
   2004  f530
   2005  f530				   .L066		;  missile0x  =  100
   2006  f530
   2007  f530		       a9 64		      LDA	#100
   2008  f532		       85 82		      STA	missile0x
   2009  f534				   .L067		;  missile0y  =  85
   2010  f534
   2011  f534		       a9 55		      LDA	#85
   2012  f536		       85 91		      STA	missile0y
   2013  f538				   .L068		;  missile0height  =  8
   2014  f538
   2015  f538		       a9 08		      LDA	#8
   2016  f53a		       85 90		      STA	missile0height
   2017  f53c				   .
   2018  f53c							; 
   2019  f53c
   2020  f53c				   .L069		;  missile1x  =  120
   2021  f53c
   2022  f53c		       a9 78		      LDA	#120
   2023  f53e		       85 83		      STA	missile1x
   2024  f540				   .L070		;  missile1y  =  85
   2025  f540
   2026  f540		       a9 55		      LDA	#85
   2027  f542		       85 88		      STA	missile1y
   2028  f544				   .L071		;  missile1height  =  8
   2029  f544
   2030  f544		       a9 08		      LDA	#8
   2031  f546		       85 87		      STA	missile1height
   2032  f548				   .
   2033  f548							; 
   2034  f548
   2035  f548				   .L072		;  scorecolor	=  $1C
   2036  f548
   2037  f548		       a9 1c		      LDA	#$1C
   2038  f54a		       85 a3		      STA	scorecolor
   2039  f54c				   .
   2040  f54c							; 
   2041  f54c
   2042  f54c				   .
   2043  f54c							; 
   2044  f54c
   2045  f54c				   .
   2046  f54c							; 
   2047  f54c
   2048  f54c				   .L073		;  NUSIZ0  =  $00
   2049  f54c
   2050  f54c		       a9 00		      LDA	#$00
   2051  f54e		       85 04		      STA	NUSIZ0
   2052  f550				   .
   2053  f550							; 
   2054  f550
   2055  f550				   .L074		;  COLUBK  =  $00
   2056  f550
   2057  f550		       a9 00		      LDA	#$00
   2058  f552		       85 09		      STA	COLUBK
   2059  f554				   .L075		;  COLUP0  =  $02
   2060  f554
   2061  f554		       a9 02		      LDA	#$02
   2062  f556		       85 06		      STA	COLUP0
   2063  f558				   .L076		;  COLUP1  =  $08
   2064  f558
   2065  f558		       a9 08		      LDA	#$08
   2066  f55a		       85 07		      STA	COLUP1
   2067  f55c				   .L077		;  COLUPF  =  $8A
   2068  f55c
   2069  f55c		       a9 8a		      LDA	#$8A
   2070  f55e		       85 08		      STA	COLUPF
   2071  f560				   .
   2072  f560							; 
   2073  f560
   2074  f560				   .L078		;  z  =  1
   2075  f560
   2076  f560		       a9 01		      LDA	#1
   2077  f562		       85 ed		      STA	z
   2078  f564				   .L079		;  rem mainloop ........................................................................
   2079  f564
   2080  f564				   .
   2081  f564							; 
   2082  f564
   2083  f564				   .main
   2084  f564							; main
   2085  f564
   2086  f564				   .
   2087  f564							; 
   2088  f564
   2089  f564				   .L080		;  COLUP0  =  $1C
   2090  f564
   2091  f564		       a9 1c		      LDA	#$1C
   2092  f566		       85 06		      STA	COLUP0
   2093  f568				   .L081		;  COLUP1  =  $08
   2094  f568
   2095  f568		       a9 08		      LDA	#$08
   2096  f56a		       85 07		      STA	COLUP1
   2097  f56c				   .
   2098  f56c							; 
   2099  f56c
   2100  f56c				   .L082		;  if	( rand & 1 )   =  0  &&  player1y  =  0 then meteor_draw_mode  =  $07  :  missile0height  =  20  :  missile1height  =  20
   2101  f56c
   2102  f56c							; complex condition detected
   2103  f56c							; complex statement detected
   2104  f56c		       20 b6 f3 	      jsr	randomize
   2105  f56f		       29 01		      AND	#1
   2106  f571							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2107  f571		       c9 00		      CMP	#0
   2108  f573		       d0 10		      BNE	.skipL082
   2109  f575				   .condpart1
   2110  f575		       a5 86		      LDA	player1y
   2111  f577		       c9 00		      CMP	#0
   2112  f579		       d0 0a		      BNE	.skip1then
   2113  f57b				   .condpart2
   2114  f57b		       a9 07		      LDA	#$07
   2115  f57d		       85 ea		      STA	meteor_draw_mode
   2116  f57f		       a9 14		      LDA	#20
   2117  f581		       85 90		      STA	missile0height
   2118  f583		       85 87		      STA	missile1height
   2119  f585				   .skip1then
   2120  f585				   .skipL082
   2121  f585				   .L083		;  if	( rand & 1 )   =  1  &&  player1y  =  0 then meteor_draw_mode  =  $00  :  missile0height  =  8	:  missile1height  =  8
   2122  f585
   2123  f585							; complex condition detected
   2124  f585							; complex statement detected
   2125  f585		       20 b6 f3 	      jsr	randomize
   2126  f588		       29 01		      AND	#1
   2127  f58a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2128  f58a		       c9 01		      CMP	#1
   2129  f58c		       d0 10		      BNE	.skipL083
   2130  f58e				   .condpart3
   2131  f58e		       a5 86		      LDA	player1y
   2132  f590		       c9 00		      CMP	#0
   2133  f592		       d0 0a		      BNE	.skip3then
   2134  f594				   .condpart4
   2135  f594		       a9 00		      LDA	#$00
   2136  f596		       85 ea		      STA	meteor_draw_mode
   2137  f598		       a9 08		      LDA	#8
   2138  f59a		       85 90		      STA	missile0height
   2139  f59c		       85 87		      STA	missile1height
   2140  f59e				   .skip3then
   2141  f59e				   .skipL083
   2142  f59e				   .
   2143  f59e							; 
   2144  f59e
   2145  f59e				   .L084		;  NUSIZ1  =  meteor_draw_mode
   2146  f59e
   2147  f59e		       a5 ea		      LDA	meteor_draw_mode
   2148  f5a0		       85 05		      STA	NUSIZ1
   2149  f5a2				   .
   2150  f5a2							; 
   2151  f5a2
   2152  f5a2				   .L085		;  if dash_cooldown  >  0 then dash_cooldown  =  dash_cooldown  +  1
   2153  f5a2
   2154  f5a2		       a9 00		      LDA	#0
   2155  f5a4		       c5 e3		      CMP	dash_cooldown
   2156  f5a6		       b0 02		      BCS	.skipL085
   2157  f5a8				   .condpart5
   2158  f5a8		       e6 e3		      INC	dash_cooldown
   2159  f5aa				   .skipL085
   2160  f5aa				   .L086		;  if dash_cooldown  >  50 then dash_cooldown	=  0
   2161  f5aa
   2162  f5aa		       a9 32		      LDA	#50
   2163  f5ac		       c5 e3		      CMP	dash_cooldown
   2164  f5ae		       b0 04		      BCS	.skipL086
   2165  f5b0				   .condpart6
   2166  f5b0		       a9 00		      LDA	#0
   2167  f5b2		       85 e3		      STA	dash_cooldown
   2168  f5b4				   .skipL086
   2169  f5b4				   .
   2170  f5b4							; 
   2171  f5b4
   2172  f5b4				   .L087		;  player0control = player0control + 1
   2173  f5b4
   2174  f5b4		       e6 d9		      INC	player0control
   2175  f5b6				   .L088		;  rem POSSIBLY INEFFICIENT CODE, SEPARATE COLOR INFO FOR EACH FRAME...
   2176  f5b6
   2177  f5b6				   .L089		;  if player0control  =  10 then player0:
   2178  f5b6
   2179  f5b6		       a5 d9		      LDA	player0control
   2180  f5b8		       c9 0a		      CMP	#10
   2181  f5ba		       d0 0c		      BNE	.skipL089
   2182  f5bc				   .condpart7
   2183  f5bc		       a2 80		      LDX	#<player7then_0
   2184  f5be		       86 8a		      STX	player0pointerlo
   2185  f5c0		       a9 f9		      LDA	#>player7then_0
   2186  f5c2		       85 8b		      STA	player0pointerhi
   2187  f5c4		       a9 07		      LDA	#7
   2188  f5c6		       85 8e		      STA	player0height
   2189  f5c8				   .skipL089
   2190  f5c8				   .
   2191  f5c8							; 
   2192  f5c8
   2193  f5c8				   .L090		;  if player0control  =  20 then player0:
   2194  f5c8
   2195  f5c8		       a5 d9		      LDA	player0control
   2196  f5ca		       c9 14		      CMP	#20
   2197  f5cc		       d0 0c		      BNE	.skipL090
   2198  f5ce				   .condpart8
   2199  f5ce		       a2 88		      LDX	#<player8then_0
   2200  f5d0		       86 8a		      STX	player0pointerlo
   2201  f5d2		       a9 f9		      LDA	#>player8then_0
   2202  f5d4		       85 8b		      STA	player0pointerhi
   2203  f5d6		       a9 07		      LDA	#7
   2204  f5d8		       85 8e		      STA	player0height
   2205  f5da				   .skipL090
   2206  f5da				   .
   2207  f5da							; 
   2208  f5da
   2209  f5da				   .
   2210  f5da							; 
   2211  f5da
   2212  f5da				   .
   2213  f5da							; 
   2214  f5da
   2215  f5da				   .
   2216  f5da							; 
   2217  f5da
   2218  f5da				   .L091		;  if player0control = 20 then player0control = 0
   2219  f5da
   2220  f5da		       a5 d9		      LDA	player0control
   2221  f5dc		       c9 14		      CMP	#20
   2222  f5de		       d0 04		      BNE	.skipL091
   2223  f5e0				   .condpart9
   2224  f5e0		       a9 00		      LDA	#0
   2225  f5e2		       85 d9		      STA	player0control
   2226  f5e4				   .skipL091
   2227  f5e4				   .
   2228  f5e4							; 
   2229  f5e4
   2230  f5e4				   .L092		;  if joy0right then z  =  1  :  player0x  =  player0x  +  1
   2231  f5e4
   2232  f5e4		       2c 80 02 	      bit	SWCHA
   2233  f5e7		       30 06		      BMI	.skipL092
   2234  f5e9				   .condpart10
   2235  f5e9		       a9 01		      LDA	#1
   2236  f5eb		       85 ed		      STA	z
   2237  f5ed		       e6 80		      INC	player0x
   2238  f5ef				   .skipL092
   2239  f5ef				   .L093		;  if joy0left then z	=   - 1  :  player0x  =  player0x  -  1
   2240  f5ef
   2241  f5ef		       2c 80 02 	      bit	SWCHA
   2242  f5f2		       70 06		      BVS	.skipL093
   2243  f5f4				   .condpart11
   2244  f5f4		       a9 ff		      LDA	#255
   2245  f5f6		       85 ed		      STA	z
   2246  f5f8		       c6 80		      DEC	player0x
   2247  f5fa				   .skipL093
   2248  f5fa				   .L094		;  if z  =  1 then REFP0  =  0
   2249  f5fa
   2250  f5fa		       a5 ed		      LDA	z
   2251  f5fc		       c9 01		      CMP	#1
   2252  f5fe		       d0 04		      BNE	.skipL094
   2253  f600				   .condpart12
   2254  f600		       a9 00		      LDA	#0
   2255  f602		       85 0b		      STA	REFP0
   2256  f604				   .skipL094
   2257  f604				   .L095		;  if z  =   - 1 then REFP0  =  8
   2258  f604
   2259  f604							; complex condition detected
   2260  f604		       a9 ff		      LDA	#255
   2261  f606		       48		      PHA
   2262  f607		       ba		      TSX
   2263  f608		       68		      PLA
   2264  f609		       a5 ed		      LDA	z
   2265  f60b		       d5 01		      CMP	1,x
   2266  f60d		       d0 04		      BNE	.skipL095
   2267  f60f				   .condpart13
   2268  f60f		       a9 08		      LDA	#8
   2269  f611		       85 0b		      STA	REFP0
   2270  f613				   .skipL095
   2271  f613				   .
   2272  f613							; 
   2273  f613
   2274  f613				   .L096		;  if player0x  >  137 then player0x  =  137
   2275  f613
   2276  f613		       a9 89		      LDA	#137
   2277  f615		       c5 80		      CMP	player0x
   2278  f617		       b0 04		      BCS	.skipL096
   2279  f619				   .condpart14
   2280  f619		       a9 89		      LDA	#137
   2281  f61b		       85 80		      STA	player0x
   2282  f61d				   .skipL096
   2283  f61d				   .L097		;  if player0x  <  17 then player0x  =  17
   2284  f61d
   2285  f61d		       a5 80		      LDA	player0x
   2286  f61f		       c9 11		      CMP	#17
   2287  f621		       b0 04		      BCS	.skipL097
   2288  f623				   .condpart15
   2289  f623		       a9 11		      LDA	#17
   2290  f625		       85 80		      STA	player0x
   2291  f627				   .skipL097
   2292  f627				   .
   2293  f627							; 
   2294  f627
   2295  f627				   .L098		;  meteor_control = meteor_control + 1
   2296  f627
   2297  f627		       e6 da		      INC	meteor_control
   2298  f629				   .
   2299  f629							; 
   2300  f629
   2301  f629				   .L099		;  if meteor_control  =  10 then player1:
   2302  f629
   2303  f629		       a5 da		      LDA	meteor_control
   2304  f62b		       c9 0a		      CMP	#10
   2305  f62d		       d0 0c		      BNE	.skipL099
   2306  f62f				   .condpart16
   2307  f62f		       a2 90		      LDX	#<player16then_1
   2308  f631		       86 8c		      STX	player1pointerlo
   2309  f633		       a9 f9		      LDA	#>player16then_1
   2310  f635		       85 8d		      STA	player1pointerhi
   2311  f637		       a9 07		      LDA	#7
   2312  f639		       85 8f		      STA	player1height
   2313  f63b				   .skipL099
   2314  f63b				   .
   2315  f63b							; 
   2316  f63b
   2317  f63b				   .L0100		;  if meteor_control  =  20 then player1:
   2318  f63b
   2319  f63b		       a5 da		      LDA	meteor_control
   2320  f63d		       c9 14		      CMP	#20
   2321  f63f		       d0 0c		      BNE	.skipL0100
   2322  f641				   .condpart17
   2323  f641		       a2 98		      LDX	#<player17then_1
   2324  f643		       86 8c		      STX	player1pointerlo
   2325  f645		       a9 f9		      LDA	#>player17then_1
   2326  f647		       85 8d		      STA	player1pointerhi
   2327  f649		       a9 07		      LDA	#7
   2328  f64b		       85 8f		      STA	player1height
   2329  f64d				   .skipL0100
   2330  f64d				   .
   2331  f64d							; 
   2332  f64d
   2333  f64d				   .L0101		;  if meteor_control  =  30 then player1:
   2334  f64d
   2335  f64d		       a5 da		      LDA	meteor_control
   2336  f64f		       c9 1e		      CMP	#30
   2337  f651		       d0 0c		      BNE	.skipL0101
   2338  f653				   .condpart18
   2339  f653		       a2 a0		      LDX	#<player18then_1
   2340  f655		       86 8c		      STX	player1pointerlo
   2341  f657		       a9 f9		      LDA	#>player18then_1
   2342  f659		       85 8d		      STA	player1pointerhi
   2343  f65b		       a9 07		      LDA	#7
   2344  f65d		       85 8f		      STA	player1height
   2345  f65f				   .skipL0101
   2346  f65f				   .
   2347  f65f							; 
   2348  f65f
   2349  f65f				   .L0102		;  if meteor_control  =  40 then player1:
   2350  f65f
   2351  f65f		       a5 da		      LDA	meteor_control
   2352  f661		       c9 28		      CMP	#40
   2353  f663		       d0 0c		      BNE	.skipL0102
   2354  f665				   .condpart19
   2355  f665		       a2 a8		      LDX	#<player19then_1
   2356  f667		       86 8c		      STX	player1pointerlo
   2357  f669		       a9 f9		      LDA	#>player19then_1
   2358  f66b		       85 8d		      STA	player1pointerhi
   2359  f66d		       a9 07		      LDA	#7
   2360  f66f		       85 8f		      STA	player1height
   2361  f671				   .skipL0102
   2362  f671				   .
   2363  f671							; 
   2364  f671
   2365  f671				   .
   2366  f671							; 
   2367  f671
   2368  f671				   .L0103		;  if meteor_control  =  40 then meteor_control  =  0
   2369  f671
   2370  f671		       a5 da		      LDA	meteor_control
   2371  f673		       c9 28		      CMP	#40
   2372  f675		       d0 04		      BNE	.skipL0103
   2373  f677				   .condpart20
   2374  f677		       a9 00		      LDA	#0
   2375  f679		       85 da		      STA	meteor_control
   2376  f67b				   .skipL0103
   2377  f67b				   .
   2378  f67b							; 
   2379  f67b
   2380  f67b				   .L0104		;  player1y  =  player1y  +  meteor_speed
   2381  f67b
   2382  f67b		       a5 86		      LDA	player1y
   2383  f67d		       18		      CLC
   2384  f67e		       65 e0		      ADC	meteor_speed
   2385  f680		       85 86		      STA	player1y
   2386  f682				   .L0105		;  if player1y  <=  90 then goto jmp_meteor_fall
   2387  f682
   2388  f682		       a9 5a		      LDA	#90
   2389  f684		       c5 86		      CMP	player1y
   2390  f686		       90 03		      BCC	.skipL0105
   2391  f688				   .condpart21
   2392  f688		       4c 2b f7 	      jmp	.jmp_meteor_fall
   2393  f68b
   2394  f68b				   .skipL0105
   2395  f68b				   .L0106		;  missile0y  =  85
   2396  f68b
   2397  f68b		       a9 55		      LDA	#85
   2398  f68d		       85 91		      STA	missile0y
   2399  f68f				   .L0107		;  missile1y  =  85
   2400  f68f
   2401  f68f		       a9 55		      LDA	#85
   2402  f691		       85 88		      STA	missile1y
   2403  f693				   .L0108		;  player1y  =  0
   2404  f693
   2405  f693		       a9 00		      LDA	#0
   2406  f695		       85 86		      STA	player1y
   2407  f697				   .L0109		;  meteor_impact_position  =  player1x  :  COLUBK  =  $1E
   2408  f697
   2409  f697		       a5 81		      LDA	player1x
   2410  f699		       85 dc		      STA	meteor_impact_position
   2411  f69b		       a9 1e		      LDA	#$1E
   2412  f69d		       85 09		      STA	COLUBK
   2413  f69f				   .
   2414  f69f							; 
   2415  f69f
   2416  f69f				   .L0110		;  rand_temp  =  rand & 13
   2417  f69f
   2418  f69f		       20 b6 f3 	      jsr	randomize
   2419  f6a2		       29 0d		      AND	#13
   2420  f6a4		       85 e8		      STA	rand_temp
   2421  f6a6				   .L0111		;  if rand_temp  =  0 then player1x  =  50
   2422  f6a6
   2423  f6a6		       a5 e8		      LDA	rand_temp
   2424  f6a8		       c9 00		      CMP	#0
   2425  f6aa		       d0 04		      BNE	.skipL0111
   2426  f6ac				   .condpart22
   2427  f6ac		       a9 32		      LDA	#50
   2428  f6ae		       85 81		      STA	player1x
   2429  f6b0				   .skipL0111
   2430  f6b0				   .L0112		;  if rand_temp  =  1 then player1x  =  60
   2431  f6b0
   2432  f6b0		       a5 e8		      LDA	rand_temp
   2433  f6b2		       c9 01		      CMP	#1
   2434  f6b4		       d0 04		      BNE	.skipL0112
   2435  f6b6				   .condpart23
   2436  f6b6		       a9 3c		      LDA	#60
   2437  f6b8		       85 81		      STA	player1x
   2438  f6ba				   .skipL0112
   2439  f6ba				   .L0113		;  if rand_temp  =  2 then player1x  =  70
   2440  f6ba
   2441  f6ba		       a5 e8		      LDA	rand_temp
   2442  f6bc		       c9 02		      CMP	#2
   2443  f6be		       d0 04		      BNE	.skipL0113
   2444  f6c0				   .condpart24
   2445  f6c0		       a9 46		      LDA	#70
   2446  f6c2		       85 81		      STA	player1x
   2447  f6c4				   .skipL0113
   2448  f6c4				   .L0114		;  if rand_temp  =  3 then player1x  =  80
   2449  f6c4
   2450  f6c4		       a5 e8		      LDA	rand_temp
   2451  f6c6		       c9 03		      CMP	#3
   2452  f6c8		       d0 04		      BNE	.skipL0114
   2453  f6ca				   .condpart25
   2454  f6ca		       a9 50		      LDA	#80
   2455  f6cc		       85 81		      STA	player1x
   2456  f6ce				   .skipL0114
   2457  f6ce				   .L0115		;  if rand_temp  =  4 then player1x  =  90
   2458  f6ce
   2459  f6ce		       a5 e8		      LDA	rand_temp
   2460  f6d0		       c9 04		      CMP	#4
   2461  f6d2		       d0 04		      BNE	.skipL0115
   2462  f6d4				   .condpart26
   2463  f6d4		       a9 5a		      LDA	#90
   2464  f6d6		       85 81		      STA	player1x
   2465  f6d8				   .skipL0115
   2466  f6d8				   .L0116		;  if rand_temp  =  5 then player1x  =  100
   2467  f6d8
   2468  f6d8		       a5 e8		      LDA	rand_temp
   2469  f6da		       c9 05		      CMP	#5
   2470  f6dc		       d0 04		      BNE	.skipL0116
   2471  f6de				   .condpart27
   2472  f6de		       a9 64		      LDA	#100
   2473  f6e0		       85 81		      STA	player1x
   2474  f6e2				   .skipL0116
   2475  f6e2				   .L0117		;  if rand_temp  =  6 then player1x  =  110
   2476  f6e2
   2477  f6e2		       a5 e8		      LDA	rand_temp
   2478  f6e4		       c9 06		      CMP	#6
   2479  f6e6		       d0 04		      BNE	.skipL0117
   2480  f6e8				   .condpart28
   2481  f6e8		       a9 6e		      LDA	#110
   2482  f6ea		       85 81		      STA	player1x
   2483  f6ec				   .skipL0117
   2484  f6ec				   .L0118		;  if rand_temp  =  7 then player1x  =  120
   2485  f6ec
   2486  f6ec		       a5 e8		      LDA	rand_temp
   2487  f6ee		       c9 07		      CMP	#7
   2488  f6f0		       d0 04		      BNE	.skipL0118
   2489  f6f2				   .condpart29
   2490  f6f2		       a9 78		      LDA	#120
   2491  f6f4		       85 81		      STA	player1x
   2492  f6f6				   .skipL0118
   2493  f6f6				   .L0119		;  if rand_temp  >=  8 then player1x  =  player0x
   2494  f6f6
   2495  f6f6		       a5 e8		      LDA	rand_temp
   2496  f6f8		       c9 08		      CMP	#8
   2497  f6fa		       90 04		      BCC	.skipL0119
   2498  f6fc				   .condpart30
   2499  f6fc		       a5 80		      LDA	player0x
   2500  f6fe		       85 81		      STA	player1x
   2501  f700				   .skipL0119
   2502  f700				   .
   2503  f700							; 
   2504  f700
   2505  f700				   .L0120		;  score  =  score  +	10
   2506  f700
   2507  f700		       f8		      SED
   2508  f701		       18		      CLC
   2509  f702		       a5 95		      LDA	score+2
   2510  f704		       69 10		      ADC	#$10
   2511  f706		       85 95		      STA	score+2
   2512  f708		       a5 94		      LDA	score+1
   2513  f70a		       69 00		      ADC	#$00
   2514  f70c		       85 94		      STA	score+1
   2515  f70e		       a5 93		      LDA	score
   2516  f710		       69 00		      ADC	#$00
   2517  f712		       85 93		      STA	score
   2518  f714		       d8		      CLD
   2519  f715				   .L0121		;  missile0x  =  meteor_impact_position  -  4
   2520  f715
   2521  f715		       a5 dc		      LDA	meteor_impact_position
   2522  f717		       38		      SEC
   2523  f718		       e9 04		      SBC	#4
   2524  f71a		       85 82		      STA	missile0x
   2525  f71c				   .L0122		;  missile1x  =  meteor_impact_position  +  4
   2526  f71c
   2527  f71c		       a5 dc		      LDA	meteor_impact_position
   2528  f71e		       18		      CLC
   2529  f71f		       69 04		      ADC	#4
   2530  f721		       85 83		      STA	missile1x
   2531  f723				   .L0123		;  sounda  =  10
   2532  f723
   2533  f723		       a9 0a		      LDA	#10
   2534  f725		       85 d4		      STA	sounda
   2535  f727				   .L0124		;  soundb  =  10
   2536  f727
   2537  f727		       a9 0a		      LDA	#10
   2538  f729		       85 d5		      STA	soundb
   2539  f72b				   .
   2540  f72b							; 
   2541  f72b
   2542  f72b				   .
   2543  f72b							; 
   2544  f72b
   2545  f72b				   .
   2546  f72b							; 
   2547  f72b
   2548  f72b				   .jmp_meteor_fall
   2549  f72b							; jmp_meteor_fall
   2550  f72b
   2551  f72b				   .
   2552  f72b							; 
   2553  f72b
   2554  f72b				   .L0125		;  missile0x  =  missile0x  -	meteor_speed
   2555  f72b
   2556  f72b		       a5 82		      LDA	missile0x
   2557  f72d		       38		      SEC
   2558  f72e		       e5 e0		      SBC	meteor_speed
   2559  f730		       85 82		      STA	missile0x
   2560  f732				   .L0126		;  missile1x  =  missile1x  +	meteor_speed
   2561  f732
   2562  f732		       a5 83		      LDA	missile1x
   2563  f734		       18		      CLC
   2564  f735		       65 e0		      ADC	meteor_speed
   2565  f737		       85 83		      STA	missile1x
   2566  f739				   .L0127		;  if meteor_impact_position  -  missile0x  >	25 then missile0y  =  200
   2567  f739
   2568  f739							; complex condition detected
   2569  f739		       a5 dc		      LDA	meteor_impact_position
   2570  f73b		       38		      SEC
   2571  f73c		       e5 82		      SBC	missile0x
   2572  f73e		       48		      PHA
   2573  f73f		       ba		      TSX
   2574  f740		       68		      PLA
   2575  f741		       a9 19		      LDA	#25
   2576  f743		       d5 01		      CMP	1,x
   2577  f745		       b0 04		      BCS	.skipL0127
   2578  f747				   .condpart31
   2579  f747		       a9 c8		      LDA	#200
   2580  f749		       85 91		      STA	missile0y
   2581  f74b				   .skipL0127
   2582  f74b				   .L0128		;  if missile1x  -  meteor_impact_position  >	25 then missile1y  =  200
   2583  f74b
   2584  f74b							; complex condition detected
   2585  f74b		       a5 83		      LDA	missile1x
   2586  f74d		       38		      SEC
   2587  f74e		       e5 dc		      SBC	meteor_impact_position
   2588  f750		       48		      PHA
   2589  f751		       ba		      TSX
   2590  f752		       68		      PLA
   2591  f753		       a9 19		      LDA	#25
   2592  f755		       d5 01		      CMP	1,x
   2593  f757		       b0 04		      BCS	.skipL0128
   2594  f759				   .condpart32
   2595  f759		       a9 c8		      LDA	#200
   2596  f75b		       85 88		      STA	missile1y
   2597  f75d				   .skipL0128
   2598  f75d				   .L0129		;  if missile0x  <=  16  ||  missile0x  >=  160 then missile0y  =  200
   2599  f75d
   2600  f75d		       a9 10		      LDA	#16
   2601  f75f		       c5 82		      CMP	missile0x
   2602  f761		       90 03		      BCC	.skipL0129
   2603  f763				   .condpart33
   2604  f763		       4c 6c f7 	      jmp	.condpart34
   2605  f766				   .skipL0129
   2606  f766		       a5 82		      LDA	missile0x
   2607  f768		       c9 a0		      CMP	#160
   2608  f76a		       90 04		      BCC	.skip2OR
   2609  f76c				   .condpart34
   2610  f76c		       a9 c8		      LDA	#200
   2611  f76e		       85 91		      STA	missile0y
   2612  f770				   .skip2OR
   2613  f770				   .L0130		;  if missile0x  <=  16  ||  missile1x  >=  160 then missile1y  =  200
   2614  f770
   2615  f770		       a9 10		      LDA	#16
   2616  f772		       c5 82		      CMP	missile0x
   2617  f774		       90 03		      BCC	.skipL0130
   2618  f776				   .condpart35
   2619  f776		       4c 7f f7 	      jmp	.condpart36
   2620  f779				   .skipL0130
   2621  f779		       a5 83		      LDA	missile1x
   2622  f77b		       c9 a0		      CMP	#160
   2623  f77d		       90 04		      BCC	.skip3OR
   2624  f77f				   .condpart36
   2625  f77f		       a9 c8		      LDA	#200
   2626  f781		       85 88		      STA	missile1y
   2627  f783				   .skip3OR
   2628  f783				   .
   2629  f783							; 
   2630  f783
   2631  f783				   .
   2632  f783							; 
   2633  f783
   2634  f783				   .
   2635  f783							; 
   2636  f783
   2637  f783				   .L0131		;  if joy0fire  &&  joy0left  &&  dash_cooldown  =  0 then player0x  =  player0x  -  8  :  dash_cooldown  =  1
   2638  f783
   2639  f783		       24 0c		      bit	INPT4
   2640  f785		       30 16		      BMI	.skipL0131
   2641  f787				   .condpart37
   2642  f787		       2c 80 02 	      bit	SWCHA
   2643  f78a		       70 11		      BVS	.skip37then
   2644  f78c				   .condpart38
   2645  f78c		       a5 e3		      LDA	dash_cooldown
   2646  f78e		       c9 00		      CMP	#0
   2647  f790		       d0 0b		      BNE	.skip38then
   2648  f792				   .condpart39
   2649  f792		       a5 80		      LDA	player0x
   2650  f794		       38		      SEC
   2651  f795		       e9 08		      SBC	#8
   2652  f797		       85 80		      STA	player0x
   2653  f799		       a9 01		      LDA	#1
   2654  f79b		       85 e3		      STA	dash_cooldown
   2655  f79d				   .skip38then
   2656  f79d				   .skip37then
   2657  f79d				   .skipL0131
   2658  f79d				   .L0132		;  if joy0fire  &&  joy0right	&&  dash_cooldown  =  0 then player0x  =  player0x  +  8  :  dash_cooldown  =  1
   2659  f79d
   2660  f79d		       24 0c		      bit	INPT4
   2661  f79f		       30 16		      BMI	.skipL0132
   2662  f7a1				   .condpart40
   2663  f7a1		       2c 80 02 	      bit	SWCHA
   2664  f7a4		       30 11		      BMI	.skip40then
   2665  f7a6				   .condpart41
   2666  f7a6		       a5 e3		      LDA	dash_cooldown
   2667  f7a8		       c9 00		      CMP	#0
   2668  f7aa		       d0 0b		      BNE	.skip41then
   2669  f7ac				   .condpart42
   2670  f7ac		       a5 80		      LDA	player0x
   2671  f7ae		       18		      CLC
   2672  f7af		       69 08		      ADC	#8
   2673  f7b1		       85 80		      STA	player0x
   2674  f7b3		       a9 01		      LDA	#1
   2675  f7b5		       85 e3		      STA	dash_cooldown
   2676  f7b7				   .skip41then
   2677  f7b7				   .skip40then
   2678  f7b7				   .skipL0132
   2679  f7b7				   .
   2680  f7b7							; 
   2681  f7b7
   2682  f7b7				   .L0133		;  if collision(missile0,player0) then goto gameover
   2683  f7b7
   2684  f7b7		       24 00		      bit	CXM0P
   2685  f7b9		       50 03		      BVC	.skipL0133
   2686  f7bb				   .condpart43
   2687  f7bb		       4c 63 f8 	      jmp	.gameover
   2688  f7be
   2689  f7be				   .skipL0133
   2690  f7be				   .L0134		;  if collision(missile1,player0) then goto gameover
   2691  f7be
   2692  f7be		       24 01		      bit	CXM1P
   2693  f7c0		       10 03		      BPL	.skipL0134
   2694  f7c2				   .condpart44
   2695  f7c2		       4c 63 f8 	      jmp	.gameover
   2696  f7c5
   2697  f7c5				   .skipL0134
   2698  f7c5				   .L0135		;  if collision(player1,player0) then goto gameover
   2699  f7c5
   2700  f7c5		       24 07		      bit	CXPPMM
   2701  f7c7		       10 03		      BPL	.skipL0135
   2702  f7c9				   .condpart45
   2703  f7c9		       4c 63 f8 	      jmp	.gameover
   2704  f7cc
   2705  f7cc				   .skipL0135
   2706  f7cc				   .
   2707  f7cc							; 
   2708  f7cc
   2709  f7cc				   .L0136		;  if player0x  >  160 then player0x  =  16
   2710  f7cc
   2711  f7cc		       a9 a0		      LDA	#160
   2712  f7ce		       c5 80		      CMP	player0x
   2713  f7d0		       b0 04		      BCS	.skipL0136
   2714  f7d2				   .condpart46
   2715  f7d2		       a9 10		      LDA	#16
   2716  f7d4		       85 80		      STA	player0x
   2717  f7d6				   .skipL0136
   2718  f7d6				   .L0137		;  if player0x  <  16 then player0x  =  160
   2719  f7d6
   2720  f7d6		       a5 80		      LDA	player0x
   2721  f7d8		       c9 10		      CMP	#16
   2722  f7da		       b0 04		      BCS	.skipL0137
   2723  f7dc				   .condpart47
   2724  f7dc		       a9 a0		      LDA	#160
   2725  f7de		       85 80		      STA	player0x
   2726  f7e0				   .skipL0137
   2727  f7e0				   .
   2728  f7e0							; 
   2729  f7e0
   2730  f7e0				   .
   2731  f7e0							; 
   2732  f7e0
   2733  f7e0				   .
   2734  f7e0							; 
   2735  f7e0
   2736  f7e0				   .L0138		;  drawscreen
   2737  f7e0
   2738  f7e0		       20 c4 f3 	      jsr	drawscreen
   2739  f7e3				   .
   2740  f7e3							; 
   2741  f7e3
   2742  f7e3				   .L0139		;  playfield:
   2743  f7e3
   2744  f7e3				  -	      ifconst	pfres
   2745  f7e3				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2746  f7e3					      else
   2747  f7e3		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2748  f7e5					      endif
   2749  f7e5		       4c 14 f8 	      jmp	pflabel1
   2750  f7e8				   PF_data1
   2751  f7e8		       00 00		      .byte.b	%00000000, %00000000
   2752  f7ea					      if	(pfwidth>2)
   2753  f7ea		       00 00		      .byte.b	%00000000, %00000000
   2754  f7ec					      endif
   2755  f7ec		       00 00		      .byte.b	%00000000, %00000000
   2756  f7ee					      if	(pfwidth>2)
   2757  f7ee		       01 1f		      .byte.b	%00000001, %00011111
   2758  f7f0					      endif
   2759  f7f0		       00 00		      .byte.b	%00000000, %00000000
   2760  f7f2					      if	(pfwidth>2)
   2761  f7f2		       03 3f		      .byte.b	%00000011, %00111111
   2762  f7f4					      endif
   2763  f7f4		       00 00		      .byte.b	%00000000, %00000000
   2764  f7f6					      if	(pfwidth>2)
   2765  f7f6		       01 1f		      .byte.b	%00000001, %00011111
   2766  f7f8					      endif
   2767  f7f8		       00 00		      .byte.b	%00000000, %00000000
   2768  f7fa					      if	(pfwidth>2)
   2769  f7fa		       00 00		      .byte.b	%00000000, %00000000
   2770  f7fc					      endif
   2771  f7fc		       00 00		      .byte.b	%00000000, %00000000
   2772  f7fe					      if	(pfwidth>2)
   2773  f7fe		       00 00		      .byte.b	%00000000, %00000000
   2774  f800					      endif
   2775  f800		       00 00		      .byte.b	%00000000, %00000000
   2776  f802					      if	(pfwidth>2)
   2777  f802		       00 00		      .byte.b	%00000000, %00000000
   2778  f804					      endif
   2779  f804		       70 00		      .byte.b	%01110000, %00000000
   2780  f806					      if	(pfwidth>2)
   2781  f806		       00 00		      .byte.b	%00000000, %00000000
   2782  f808					      endif
   2783  f808		       d8 00		      .byte.b	%11011000, %00000000
   2784  f80a					      if	(pfwidth>2)
   2785  f80a		       00 00		      .byte.b	%00000000, %00000000
   2786  f80c					      endif
   2787  f80c		       ff ff		      .byte.b	%11111111, %11111111
   2788  f80e					      if	(pfwidth>2)
   2789  f80e		       ff ff		      .byte.b	%11111111, %11111111
   2790  f810					      endif
   2791  f810		       ff ff		      .byte.b	%11111111, %11111111
   2792  f812					      if	(pfwidth>2)
   2793  f812		       ff ff		      .byte.b	%11111111, %11111111
   2794  f814					      endif
   2795  f814				   pflabel1
   2796  f814		       bd e8 f7 	      lda	PF_data1,x
   2797  f817		       95 a4		      sta	playfield,x
   2798  f819		       ca		      dex
   2799  f81a		       10 f8		      bpl	pflabel1
   2800  f81c				   .
   2801  f81c							; 
   2802  f81c
   2803  f81c				   .L0140		;  pfcolors:
   2804  f81c
   2805  f81c		       a9 1a		      lda	# $1A
   2806  f81e		       85 08		      sta	COLUPF
   2807  f820				  -	      ifconst	pfres
   2808  f820				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2809  f820					      else
   2810  f820		       a9 f9		      lda	#>(pfcolorlabel13-83)
   2811  f822					      endif
   2812  f822		       85 f1		      sta	pfcolortable+1
   2813  f824				  -	      ifconst	pfres
   2814  f824				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2815  f824					      else
   2816  f824		       a9 05		      lda	#<(pfcolorlabel13-83)
   2817  f826					      endif
   2818  f826		       85 f0		      sta	pfcolortable
   2819  f828				   .
   2820  f828							; 
   2821  f828
   2822  f828				   .
   2823  f828							; 
   2824  f828
   2825  f828				   .L0141		;  rem sounds
   2826  f828
   2827  f828				   .L0142		;  if sounda  >  0 then sounda  =  sounda  -  1  :  AUDV1  =  4  :  AUDC1  =  4  :  AUDF0  =  sounda else AUDV1  =  0
   2828  f828
   2829  f828		       a9 00		      LDA	#0
   2830  f82a		       c5 d4		      CMP	sounda
   2831  f82c		       b0 0f		      BCS	.skipL0142
   2832  f82e				   .condpart48
   2833  f82e		       c6 d4		      DEC	sounda
   2834  f830		       a9 04		      LDA	#4
   2835  f832		       85 1a		      STA	AUDV1
   2836  f834		       85 16		      STA	AUDC1
   2837  f836		       a5 d4		      LDA	sounda
   2838  f838		       85 17		      STA	AUDF0
   2839  f83a		       4c 41 f8 	      jmp	.skipelse0
   2840  f83d				   .skipL0142
   2841  f83d		       a9 00		      LDA	#0
   2842  f83f		       85 1a		      STA	AUDV1
   2843  f841				   .skipelse0
   2844  f841				   .L0143		;  if soundb  >  0 then soundb  =  soundb  -  1  :  AUDV1  =  7  :  AUDC1  =  8  :  AUDF1  =  soundb else AUDV1  =  0
   2845  f841
   2846  f841		       a9 00		      LDA	#0
   2847  f843		       c5 d5		      CMP	soundb
   2848  f845		       b0 11		      BCS	.skipL0143
   2849  f847				   .condpart49
   2850  f847		       c6 d5		      DEC	soundb
   2851  f849		       a9 07		      LDA	#7
   2852  f84b		       85 1a		      STA	AUDV1
   2853  f84d		       a9 08		      LDA	#8
   2854  f84f		       85 16		      STA	AUDC1
   2855  f851		       a5 d5		      LDA	soundb
   2856  f853		       85 18		      STA	AUDF1
   2857  f855		       4c 5c f8 	      jmp	.skipelse1
   2858  f858				   .skipL0143
   2859  f858		       a9 00		      LDA	#0
   2860  f85a		       85 1a		      STA	AUDV1
   2861  f85c				   .skipelse1
   2862  f85c				   .
   2863  f85c							; 
   2864  f85c
   2865  f85c				   .L0144		;  COLUBK  =  $00
   2866  f85c
   2867  f85c		       a9 00		      LDA	#$00
   2868  f85e		       85 09		      STA	COLUBK
   2869  f860				   .
   2870  f860							; 
   2871  f860
   2872  f860				   .L0145		;  goto main
   2873  f860
   2874  f860		       4c 64 f5 	      jmp	.main
   2875  f863
   2876  f863				   .
   2877  f863							; 
   2878  f863
   2879  f863				   .gameover
   2880  f863							; gameover
   2881  f863
   2882  f863				   .
   2883  f863							; 
   2884  f863
   2885  f863				   .L0146		;  playfield:
   2886  f863
   2887  f863				  -	      ifconst	pfres
   2888  f863				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2889  f863					      else
   2890  f863		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2891  f865					      endif
   2892  f865		       4c 94 f8 	      jmp	pflabel2
   2893  f868				   PF_data2
   2894  f868		       00 00		      .byte.b	%00000000, %00000000
   2895  f86a					      if	(pfwidth>2)
   2896  f86a		       00 00		      .byte.b	%00000000, %00000000
   2897  f86c					      endif
   2898  f86c		       1a ba		      .byte.b	%00011010, %10111010
   2899  f86e					      if	(pfwidth>2)
   2900  f86e		       4b 1d		      .byte.b	%01001011, %00011101
   2901  f870					      endif
   2902  f870		       11 90		      .byte.b	%00010001, %10010000
   2903  f872					      if	(pfwidth>2)
   2904  f872		       6a 08		      .byte.b	%01101010, %00001000
   2905  f874					      endif
   2906  f874		       19 91		      .byte.b	%00011001, %10010001
   2907  f876					      if	(pfwidth>2)
   2908  f876		       5a 08		      .byte.b	%01011010, %00001000
   2909  f878					      endif
   2910  f878		       12 92		      .byte.b	%00010010, %10010010
   2911  f87a					      if	(pfwidth>2)
   2912  f87a		       4a 08		      .byte.b	%01001010, %00001000
   2913  f87c					      endif
   2914  f87c		       1a 92		      .byte.b	%00011010, %10010010
   2915  f87e					      if	(pfwidth>2)
   2916  f87e		       4b 09		      .byte.b	%01001011, %00001001
   2917  f880					      endif
   2918  f880		       00 00		      .byte.b	%00000000, %00000000
   2919  f882					      if	(pfwidth>2)
   2920  f882		       00 00		      .byte.b	%00000000, %00000000
   2921  f884					      endif
   2922  f884		       00 00		      .byte.b	%00000000, %00000000
   2923  f886					      if	(pfwidth>2)
   2924  f886		       00 00		      .byte.b	%00000000, %00000000
   2925  f888					      endif
   2926  f888		       00 00		      .byte.b	%00000000, %00000000
   2927  f88a					      if	(pfwidth>2)
   2928  f88a		       00 00		      .byte.b	%00000000, %00000000
   2929  f88c					      endif
   2930  f88c		       00 00		      .byte.b	%00000000, %00000000
   2931  f88e					      if	(pfwidth>2)
   2932  f88e		       00 00		      .byte.b	%00000000, %00000000
   2933  f890					      endif
   2934  f890		       00 00		      .byte.b	%00000000, %00000000
   2935  f892					      if	(pfwidth>2)
   2936  f892		       00 00		      .byte.b	%00000000, %00000000
   2937  f894					      endif
   2938  f894				   pflabel2
   2939  f894		       bd 68 f8 	      lda	PF_data2,x
   2940  f897		       95 a4		      sta	playfield,x
   2941  f899		       ca		      dex
   2942  f89a		       10 f8		      bpl	pflabel2
   2943  f89c				   .
   2944  f89c							; 
   2945  f89c
   2946  f89c				   .L0147		;  pfcolors:
   2947  f89c
   2948  f89c		       a9 0e		      lda	# $0E
   2949  f89e		       85 08		      sta	COLUPF
   2950  f8a0				  -	      ifconst	pfres
   2951  f8a0				  -	      lda	#>(pfcolorlabel13-130+pfres*pfwidth)
   2952  f8a0					      else
   2953  f8a0		       a9 f9		      lda	#>(pfcolorlabel13-82)
   2954  f8a2					      endif
   2955  f8a2		       85 f1		      sta	pfcolortable+1
   2956  f8a4				  -	      ifconst	pfres
   2957  f8a4				  -	      lda	#<(pfcolorlabel13-130+pfres*pfwidth)
   2958  f8a4					      else
   2959  f8a4		       a9 06		      lda	#<(pfcolorlabel13-82)
   2960  f8a6					      endif
   2961  f8a6		       85 f0		      sta	pfcolortable
   2962  f8a8				   .
   2963  f8a8							; 
   2964  f8a8
   2965  f8a8				   .L0148		;  player0control = player0control + 1
   2966  f8a8
   2967  f8a8		       e6 d9		      INC	player0control
   2968  f8aa				   .L0149		;  rem POSSIBLY INEFFICIENT CODE, SEPARATE COLOR INFO FOR EACH FRAME...
   2969  f8aa
   2970  f8aa				   .L0150		;  if player0control  =  10 then player0:
   2971  f8aa
   2972  f8aa		       a5 d9		      LDA	player0control
   2973  f8ac		       c9 0a		      CMP	#10
   2974  f8ae		       d0 0c		      BNE	.skipL0150
   2975  f8b0				   .condpart50
   2976  f8b0		       a2 b0		      LDX	#<player50then_0
   2977  f8b2		       86 8a		      STX	player0pointerlo
   2978  f8b4		       a9 f9		      LDA	#>player50then_0
   2979  f8b6		       85 8b		      STA	player0pointerhi
   2980  f8b8		       a9 08		      LDA	#8
   2981  f8ba		       85 8e		      STA	player0height
   2982  f8bc				   .skipL0150
   2983  f8bc				   .L0151		;  if player0control  =  10 then player0color:
   2984  f8bc
   2985  f8bc		       a5 d9		      LDA	player0control
   2986  f8be		       c9 0a		      CMP	#10
   2987  f8c0		       d0 08		      BNE	.skipL0151
   2988  f8c2				   .condpart51
   2989  f8c2		       a2 b9		      LDX	#<playercolor51then_0
   2990  f8c4		       86 90		      STX	player0color
   2991  f8c6		       a9 f9		      LDA	#>playercolor51then_0
   2992  f8c8		       85 91		      STA	player0color+1
   2993  f8ca				   .skipL0151
   2994  f8ca				   .L0152		;  if player0control  =  20 then player0:
   2995  f8ca
   2996  f8ca		       a5 d9		      LDA	player0control
   2997  f8cc		       c9 14		      CMP	#20
   2998  f8ce		       d0 0c		      BNE	.skipL0152
   2999  f8d0				   .condpart52
   3000  f8d0		       a2 c2		      LDX	#<player52then_0
   3001  f8d2		       86 8a		      STX	player0pointerlo
   3002  f8d4		       a9 f9		      LDA	#>player52then_0
   3003  f8d6		       85 8b		      STA	player0pointerhi
   3004  f8d8		       a9 08		      LDA	#8
   3005  f8da		       85 8e		      STA	player0height
   3006  f8dc				   .skipL0152
   3007  f8dc				   .
   3008  f8dc							; 
   3009  f8dc
   3010  f8dc				   .L0153		;  if player0control  =  30 then player0:
   3011  f8dc
   3012  f8dc		       a5 d9		      LDA	player0control
   3013  f8de		       c9 1e		      CMP	#30
   3014  f8e0		       d0 0c		      BNE	.skipL0153
   3015  f8e2				   .condpart53
   3016  f8e2		       a2 cb		      LDX	#<player53then_0
   3017  f8e4		       86 8a		      STX	player0pointerlo
   3018  f8e6		       a9 f9		      LDA	#>player53then_0
   3019  f8e8		       85 8b		      STA	player0pointerhi
   3020  f8ea		       a9 08		      LDA	#8
   3021  f8ec		       85 8e		      STA	player0height
   3022  f8ee				   .skipL0153
   3023  f8ee				   .
   3024  f8ee							; 
   3025  f8ee
   3026  f8ee				   .
   3027  f8ee							; 
   3028  f8ee
   3029  f8ee				   .L0154		;  if player0control  =  30 then player0control  =  0
   3030  f8ee
   3031  f8ee		       a5 d9		      LDA	player0control
   3032  f8f0		       c9 1e		      CMP	#30
   3033  f8f2		       d0 04		      BNE	.skipL0154
   3034  f8f4				   .condpart54
   3035  f8f4		       a9 00		      LDA	#0
   3036  f8f6		       85 d9		      STA	player0control
   3037  f8f8				   .skipL0154
   3038  f8f8				   .
   3039  f8f8							; 
   3040  f8f8
   3041  f8f8				   .L0155		;  AUDV0  =  0  :  AUDV1  =  0
   3042  f8f8
   3043  f8f8		       a9 00		      LDA	#0
   3044  f8fa		       85 19		      STA	AUDV0
   3045  f8fc		       85 1a		      STA	AUDV1
   3046  f8fe				   .L0156		;  sounda  =  0  :  soundb  =	0
   3047  f8fe
   3048  f8fe		       a9 00		      LDA	#0
   3049  f900		       85 d4		      STA	sounda
   3050  f902		       85 d5		      STA	soundb
   3051  f904				   .L0157		;  player1x  =  200  :  player1y  =  200
   3052  f904
   3053  f904		       a9 c8		      LDA	#200
   3054  f906		       85 81		      STA	player1x
   3055  f908		       85 86		      STA	player1y
   3056  f90a				   .L0158		;  missile0x  =  200  :  missile0y  =	200
   3057  f90a
   3058  f90a		       a9 c8		      LDA	#200
   3059  f90c		       85 82		      STA	missile0x
   3060  f90e		       85 91		      STA	missile0y
   3061  f910				   .L0159		;  missile1x  =  200  :  missile1y  =	200
   3062  f910
   3063  f910		       a9 c8		      LDA	#200
   3064  f912		       85 83		      STA	missile1x
   3065  f914		       85 88		      STA	missile1y
   3066  f916				   .L0160		;  ballx  =  200  :  bally  =	200
   3067  f916
   3068  f916		       a9 c8		      LDA	#200
   3069  f918		       85 84		      STA	ballx
   3070  f91a		       85 89		      STA	bally
   3071  f91c				   .
   3072  f91c							; 
   3073  f91c
   3074  f91c				   .L0161		;  if joy0fire then reboot
   3075  f91c
   3076  f91c		       24 0c		      bit	INPT4
   3077  f91e		       30 03		      BMI	.skipL0161
   3078  f920				   .condpart55
   3079  f920		       6c fc ff 	      JMP	($FFFC)
   3080  f923				   .skipL0161
   3081  f923				   .
   3082  f923							; 
   3083  f923
   3084  f923				   .L0162		;  if switchreset then reboot
   3085  f923
   3086  f923		       a9 01		      lda	#1
   3087  f925		       2c 82 02 	      bit	SWCHB
   3088  f928		       d0 03		      BNE	.skipL0162
   3089  f92a				   .condpart56
   3090  f92a		       6c fc ff 	      JMP	($FFFC)
   3091  f92d				   .skipL0162
   3092  f92d				   .
   3093  f92d							; 
   3094  f92d
   3095  f92d				   .L0163		;  drawscreen
   3096  f92d
   3097  f92d		       20 c4 f3 	      jsr	drawscreen
   3098  f930				   .
   3099  f930							; 
   3100  f930
   3101  f930				   .L0164		;  goto gameover
   3102  f930
   3103  f930		       4c 63 f8 	      jmp	.gameover
   3104  f933
   3105  f933				  -	      ifconst	pfres
   3106  f933				  -	      if	(<*) > (254-pfres*pfwidth)
   3107  f933				  -	      align	256
   3108  f933				  -	      endif
   3109  f933				  -	      if	(<*) < (136-pfres*pfwidth)
   3110  f933				  -	      repeat	((136-pfres*pfwidth)-(<*))
   3111  f933				  -	      .byte	0
   3112  f933				  -	      repend
   3113  f933				  -	      endif
   3114  f933					      else
   3115  f933				  -	      if	(<*) > 206
   3116  f933				  -	      align	256
   3117  f933					      endif
   3118  f933					      if	(<*) < 88
   3119  f933					      repeat	(88-(<*))
   3120  f933		       00		      .byte.b	0
   3119  f933					      repend
   3120  f934		       00		      .byte.b	0
   3119  f934					      repend
   3120  f935		       00		      .byte.b	0
   3119  f935					      repend
   3120  f936		       00		      .byte.b	0
   3119  f936					      repend
   3120  f937		       00		      .byte.b	0
   3119  f937					      repend
   3120  f938		       00		      .byte.b	0
   3119  f938					      repend
   3120  f939		       00		      .byte.b	0
   3119  f939					      repend
   3120  f93a		       00		      .byte.b	0
   3119  f93a					      repend
   3120  f93b		       00		      .byte.b	0
   3119  f93b					      repend
   3120  f93c		       00		      .byte.b	0
   3119  f93c					      repend
   3120  f93d		       00		      .byte.b	0
   3119  f93d					      repend
   3120  f93e		       00		      .byte.b	0
   3119  f93e					      repend
   3120  f93f		       00		      .byte.b	0
   3119  f93f					      repend
   3120  f940		       00		      .byte.b	0
   3119  f940					      repend
   3120  f941		       00		      .byte.b	0
   3119  f941					      repend
   3120  f942		       00		      .byte.b	0
   3119  f942					      repend
   3120  f943		       00		      .byte.b	0
   3119  f943					      repend
   3120  f944		       00		      .byte.b	0
   3119  f944					      repend
   3120  f945		       00		      .byte.b	0
   3119  f945					      repend
   3120  f946		       00		      .byte.b	0
   3119  f946					      repend
   3120  f947		       00		      .byte.b	0
   3119  f947					      repend
   3120  f948		       00		      .byte.b	0
   3119  f948					      repend
   3120  f949		       00		      .byte.b	0
   3119  f949					      repend
   3120  f94a		       00		      .byte.b	0
   3119  f94a					      repend
   3120  f94b		       00		      .byte.b	0
   3119  f94b					      repend
   3120  f94c		       00		      .byte.b	0
   3119  f94c					      repend
   3120  f94d		       00		      .byte.b	0
   3119  f94d					      repend
   3120  f94e		       00		      .byte.b	0
   3119  f94e					      repend
   3120  f94f		       00		      .byte.b	0
   3119  f94f					      repend
   3120  f950		       00		      .byte.b	0
   3119  f950					      repend
   3120  f951		       00		      .byte.b	0
   3119  f951					      repend
   3120  f952		       00		      .byte.b	0
   3119  f952					      repend
   3120  f953		       00		      .byte.b	0
   3119  f953					      repend
   3120  f954		       00		      .byte.b	0
   3119  f954					      repend
   3120  f955		       00		      .byte.b	0
   3119  f955					      repend
   3120  f956		       00		      .byte.b	0
   3119  f956					      repend
   3120  f957		       00		      .byte.b	0
   3121  f958					      repend
   3122  f958					      endif
   3123  f958					      endif
   3124  f958				   pfcolorlabel13
   3125  f958		       32 1a 40 00	      .byte.b	$32, $1A, $40,0
   3126  f95c		       32 1a 40 00	      .byte.b	$32, $1A, $40,0
   3127  f960		       32 1a 40 00	      .byte.b	$32, $1A, $40,0
   3128  f964		       32 1a 40 00	      .byte.b	$32, $1A, $40,0
   3129  f968		       32 1a 40 00	      .byte.b	$32, $1A, $40,0
   3130  f96c		       32 06 0e 00	      .byte.b	$32, $06, $0E,0
   3131  f970		       32 06 0e 00	      .byte.b	$32, $06, $0E,0
   3132  f974		       32 06 0e 00	      .byte.b	$32, $06, $0E,0
   3133  f978		       32 c4 0e 00	      .byte.b	$32, $C4, $0E,0
   3134  f97c		       32 c4 0e 00	      .byte.b	$32, $C4, $0E,0
   3135  f980				  -	      if	(<*) > (<(*+7))
   3136  f980				  -	      repeat	($100-<*)
   3137  f980				  -	      .byte	0
   3138  f980				  -	      repend
   3139  f980					      endif
   3140  f980				   player7then_0
   3141  f980		       c3		      .byte.b	%11000011
   3142  f981		       c4		      .byte.b	%11000100
   3143  f982		       42		      .byte.b	%01000010
   3144  f983		       4e		      .byte.b	%01001110
   3145  f984		       41		      .byte.b	%01000001
   3146  f985		       49		      .byte.b	%01001001
   3147  f986		       42		      .byte.b	%01000010
   3148  f987		       3e		      .byte.b	%00111110
   3149  f988				  -	      if	(<*) > (<(*+7))
   3150  f988				  -	      repeat	($100-<*)
   3151  f988				  -	      .byte	0
   3152  f988				  -	      repend
   3153  f988					      endif
   3154  f988				   player8then_0
   3155  f988		       c3		      .byte.b	%11000011
   3156  f989		       c6		      .byte.b	%11000110
   3157  f98a		       40		      .byte.b	%01000000
   3158  f98b		       4f		      .byte.b	%01001111
   3159  f98c		       40		      .byte.b	%01000000
   3160  f98d		       48		      .byte.b	%01001000
   3161  f98e		       43		      .byte.b	%01000011
   3162  f98f		       3e		      .byte.b	%00111110
   3163  f990				  -	      if	(<*) > (<(*+7))
   3164  f990				  -	      repeat	($100-<*)
   3165  f990				  -	      .byte	0
   3166  f990				  -	      repend
   3167  f990					      endif
   3168  f990				   player16then_1
   3169  f990		       18		      .byte.b	%00011000
   3170  f991		       24		      .byte.b	%00100100
   3171  f992		       5a		      .byte.b	%01011010
   3172  f993		       24		      .byte.b	%00100100
   3173  f994		       4a		      .byte.b	%01001010
   3174  f995		       42		      .byte.b	%01000010
   3175  f996		       52		      .byte.b	%01010010
   3176  f997		       3c		      .byte.b	%00111100
   3177  f998				  -	      if	(<*) > (<(*+7))
   3178  f998				  -	      repeat	($100-<*)
   3179  f998				  -	      .byte	0
   3180  f998				  -	      repend
   3181  f998					      endif
   3182  f998				   player17then_1
   3183  f998		       18		      .byte.b	%00011000
   3184  f999		       42		      .byte.b	%01000010
   3185  f99a		       99		      .byte.b	%10011001
   3186  f99b		       24		      .byte.b	%00100100
   3187  f99c		       52		      .byte.b	%01010010
   3188  f99d		       4a		      .byte.b	%01001010
   3189  f99e		       42		      .byte.b	%01000010
   3190  f99f		       3c		      .byte.b	%00111100
   3191  f9a0				  -	      if	(<*) > (<(*+7))
   3192  f9a0				  -	      repeat	($100-<*)
   3193  f9a0				  -	      .byte	0
   3194  f9a0				  -	      repend
   3195  f9a0					      endif
   3196  f9a0				   player18then_1
   3197  f9a0		       00		      .byte.b	%00000000
   3198  f9a1		       64		      .byte.b	%01100100
   3199  f9a2		       18		      .byte.b	%00011000
   3200  f9a3		       25		      .byte.b	%00100101
   3201  f9a4		       c2		      .byte.b	%11000010
   3202  f9a5		       62		      .byte.b	%01100010
   3203  f9a6		       46		      .byte.b	%01000110
   3204  f9a7		       3c		      .byte.b	%00111100
   3205  f9a8				  -	      if	(<*) > (<(*+7))
   3206  f9a8				  -	      repeat	($100-<*)
   3207  f9a8				  -	      .byte	0
   3208  f9a8				  -	      repend
   3209  f9a8					      endif
   3210  f9a8				   player19then_1
   3211  f9a8		       00		      .byte.b	%00000000
   3212  f9a9		       40		      .byte.b	%01000000
   3213  f9aa		       18		      .byte.b	%00011000
   3214  f9ab		       25		      .byte.b	%00100101
   3215  f9ac		       5a		      .byte.b	%01011010
   3216  f9ad		       c7		      .byte.b	%11000111
   3217  f9ae		       4a		      .byte.b	%01001010
   3218  f9af		       3c		      .byte.b	%00111100
   3219  f9b0				  -	      if	(<*) > (<(*+8))
   3220  f9b0				  -	      repeat	($100-<*)
   3221  f9b0				  -	      .byte	0
   3222  f9b0				  -	      repend
   3223  f9b0					      endif
   3224  f9b0				   player50then_0
   3225  f9b0		       42		      .byte.b	%01000010
   3226  f9b1		       a5		      .byte.b	%10100101
   3227  f9b2		       99		      .byte.b	%10011001
   3228  f9b3		       81		      .byte.b	%10000001
   3229  f9b4		       42		      .byte.b	%01000010
   3230  f9b5		       81		      .byte.b	%10000001
   3231  f9b6		       99		      .byte.b	%10011001
   3232  f9b7		       a5		      .byte.b	%10100101
   3233  f9b8		       42		      .byte.b	%01000010
   3234  f9b9				  -	      if	(<*) > (<(*+8))
   3235  f9b9				  -	      repeat	($100-<*)
   3236  f9b9				  -	      .byte	0
   3237  f9b9				  -	      repend
   3238  f9b9					      endif
   3239  f9b9				   playercolor51then_0
   3240  f9b9		       0e		      .byte.b	$0E	;
   3241  f9ba		       0e		      .byte.b	$0E	;
   3242  f9bb		       0e		      .byte.b	$0E	;
   3243  f9bc		       0e		      .byte.b	$0E	;
   3244  f9bd		       0e		      .byte.b	$0E	;
   3245  f9be		       0e		      .byte.b	$0E	;
   3246  f9bf		       0e		      .byte.b	$0E	;
   3247  f9c0		       0e		      .byte.b	$0E	;
   3248  f9c1		       0e		      .byte.b	$0E	;
   3249  f9c2				  -	      if	(<*) > (<(*+8))
   3250  f9c2				  -	      repeat	($100-<*)
   3251  f9c2				  -	      .byte	0
   3252  f9c2				  -	      repend
   3253  f9c2					      endif
   3254  f9c2				   player52then_0
   3255  f9c2		       00		      .byte.b	%00000000
   3256  f9c3		       42		      .byte.b	%01000010
   3257  f9c4		       a5		      .byte.b	%10100101
   3258  f9c5		       99		      .byte.b	%10011001
   3259  f9c6		       42		      .byte.b	%01000010
   3260  f9c7		       99		      .byte.b	%10011001
   3261  f9c8		       a5		      .byte.b	%10100101
   3262  f9c9		       42		      .byte.b	%01000010
   3263  f9ca		       00		      .byte.b	%00000000
   3264  f9cb				  -	      if	(<*) > (<(*+8))
   3265  f9cb				  -	      repeat	($100-<*)
   3266  f9cb				  -	      .byte	0
   3267  f9cb				  -	      repend
   3268  f9cb					      endif
   3269  f9cb				   player53then_0
   3270  f9cb		       42		      .byte.b	%01000010
   3271  f9cc		       a5		      .byte.b	%10100101
   3272  f9cd		       99		      .byte.b	%10011001
   3273  f9ce		       81		      .byte.b	%10000001
   3274  f9cf		       42		      .byte.b	%01000010
   3275  f9d0		       81		      .byte.b	%10000001
   3276  f9d1		       99		      .byte.b	%10011001
   3277  f9d2		       a5		      .byte.b	%10100101
   3278  f9d3		       42		      .byte.b	%01000010
   3279  f9d4					      if	ECHOFIRST
      1480 bytes of ROM space left
   3280  f9d4					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3281  f9d4					      endif
   3282  f9d4		       00 01	   ECHOFIRST  =	1
   3283  f9d4
   3284  f9d4
   3285  f9d4
   3286  f9d4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3287  f9d4
   3288  f9d4							; feel free to modify the score graphics - just keep each digit 8 high
   3289  f9d4							; and keep the conditional compilation stuff intact
   3290  f9d4				  -	      ifconst	ROM2k
   3291  f9d4				  -	      ORG	$F7AC-8
   3292  f9d4					      else
   3293  f9d4				  -	      ifconst	bankswitch
   3294  f9d4				  -	      if	bankswitch == 8
   3295  f9d4				  -	      ORG	$2F94-bscode_length
   3296  f9d4				  -	      RORG	$FF94-bscode_length
   3297  f9d4				  -	      endif
   3298  f9d4				  -	      if	bankswitch == 16
   3299  f9d4				  -	      ORG	$4F94-bscode_length
   3300  f9d4				  -	      RORG	$FF94-bscode_length
   3301  f9d4				  -	      endif
   3302  f9d4				  -	      if	bankswitch == 32
   3303  f9d4				  -	      ORG	$8F94-bscode_length
   3304  f9d4				  -	      RORG	$FF94-bscode_length
   3305  f9d4				  -	      endif
   3306  f9d4				  -	      if	bankswitch == 64
   3307  f9d4				  -	      ORG	$10F80-bscode_length
   3308  f9d4				  -	      RORG	$1FF80-bscode_length
   3309  f9d4				  -	      endif
   3310  f9d4					      else
   3311  ff9c					      ORG	$FF9C
   3312  ff9c					      endif
   3313  ff9c					      endif
   3314  ff9c
   3315  ff9c							; font equates
   3316  ff9c		       00 01	   .21stcentury =	1
   3317  ff9c		       00 02	   alarmclock =	2
   3318  ff9c		       00 03	   handwritten =	3
   3319  ff9c		       00 04	   interrupted =	4
   3320  ff9c		       00 05	   retroputer =	5
   3321  ff9c		       00 06	   whimsey    =	6
   3322  ff9c		       00 07	   tiny       =	7
   3323  ff9c		       00 08	   hex	      =	8
   3324  ff9c
   3325  ff9c				  -	      ifconst	font
   3326  ff9c				  -	      if	font == hex
   3327  ff9c				  -	      ORG	. - 48
   3328  ff9c				  -	      endif
   3329  ff9c					      endif
   3330  ff9c
   3331  ff9c				   scoretable
   3332  ff9c
   3333  ff9c				  -	      ifconst	font
   3334  ff9c				  -	      if	font == .21stcentury
   3335  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3336  ff9c				  -	      endif
   3337  ff9c				  -	      if	font == alarmclock
   3338  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3339  ff9c				  -	      endif
   3340  ff9c				  -	      if	font == handwritten
   3341  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3342  ff9c				  -	      endif
   3343  ff9c				  -	      if	font == interrupted
   3344  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3345  ff9c				  -	      endif
   3346  ff9c				  -	      if	font == retroputer
   3347  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3348  ff9c				  -	      endif
   3349  ff9c				  -	      if	font == whimsey
   3350  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3351  ff9c				  -	      endif
   3352  ff9c				  -	      if	font == tiny
   3353  ff9c				  -	      include	"score_graphics.asm.tiny"
   3354  ff9c				  -	      endif
   3355  ff9c				  -	      if	font == hex
   3356  ff9c				  -	      include	"score_graphics.asm.hex"
   3357  ff9c				  -	      endif
   3358  ff9c					      else		; default font
   3359  ff9c
   3360  ff9c		       3c		      .byte.b	%00111100
   3361  ff9d		       66		      .byte.b	%01100110
   3362  ff9e		       66		      .byte.b	%01100110
   3363  ff9f		       66		      .byte.b	%01100110
   3364  ffa0		       66		      .byte.b	%01100110
   3365  ffa1		       66		      .byte.b	%01100110
   3366  ffa2		       66		      .byte.b	%01100110
   3367  ffa3		       3c		      .byte.b	%00111100
   3368  ffa4
   3369  ffa4		       7e		      .byte.b	%01111110
   3370  ffa5		       18		      .byte.b	%00011000
   3371  ffa6		       18		      .byte.b	%00011000
   3372  ffa7		       18		      .byte.b	%00011000
   3373  ffa8		       18		      .byte.b	%00011000
   3374  ffa9		       38		      .byte.b	%00111000
   3375  ffaa		       18		      .byte.b	%00011000
   3376  ffab		       08		      .byte.b	%00001000
   3377  ffac
   3378  ffac		       7e		      .byte.b	%01111110
   3379  ffad		       60		      .byte.b	%01100000
   3380  ffae		       60		      .byte.b	%01100000
   3381  ffaf		       3c		      .byte.b	%00111100
   3382  ffb0		       06		      .byte.b	%00000110
   3383  ffb1		       06		      .byte.b	%00000110
   3384  ffb2		       46		      .byte.b	%01000110
   3385  ffb3		       3c		      .byte.b	%00111100
   3386  ffb4
   3387  ffb4		       3c		      .byte.b	%00111100
   3388  ffb5		       46		      .byte.b	%01000110
   3389  ffb6		       06		      .byte.b	%00000110
   3390  ffb7		       06		      .byte.b	%00000110
   3391  ffb8		       1c		      .byte.b	%00011100
   3392  ffb9		       06		      .byte.b	%00000110
   3393  ffba		       46		      .byte.b	%01000110
   3394  ffbb		       3c		      .byte.b	%00111100
   3395  ffbc
   3396  ffbc		       0c		      .byte.b	%00001100
   3397  ffbd		       0c		      .byte.b	%00001100
   3398  ffbe		       7e		      .byte.b	%01111110
   3399  ffbf		       4c		      .byte.b	%01001100
   3400  ffc0		       4c		      .byte.b	%01001100
   3401  ffc1		       2c		      .byte.b	%00101100
   3402  ffc2		       1c		      .byte.b	%00011100
   3403  ffc3		       0c		      .byte.b	%00001100
   3404  ffc4
   3405  ffc4		       3c		      .byte.b	%00111100
   3406  ffc5		       46		      .byte.b	%01000110
   3407  ffc6		       06		      .byte.b	%00000110
   3408  ffc7		       06		      .byte.b	%00000110
   3409  ffc8		       3c		      .byte.b	%00111100
   3410  ffc9		       60		      .byte.b	%01100000
   3411  ffca		       60		      .byte.b	%01100000
   3412  ffcb		       7e		      .byte.b	%01111110
   3413  ffcc
   3414  ffcc		       3c		      .byte.b	%00111100
   3415  ffcd		       66		      .byte.b	%01100110
   3416  ffce		       66		      .byte.b	%01100110
   3417  ffcf		       66		      .byte.b	%01100110
   3418  ffd0		       7c		      .byte.b	%01111100
   3419  ffd1		       60		      .byte.b	%01100000
   3420  ffd2		       62		      .byte.b	%01100010
   3421  ffd3		       3c		      .byte.b	%00111100
   3422  ffd4
   3423  ffd4		       30		      .byte.b	%00110000
   3424  ffd5		       30		      .byte.b	%00110000
   3425  ffd6		       30		      .byte.b	%00110000
   3426  ffd7		       18		      .byte.b	%00011000
   3427  ffd8		       0c		      .byte.b	%00001100
   3428  ffd9		       06		      .byte.b	%00000110
   3429  ffda		       42		      .byte.b	%01000010
   3430  ffdb		       3e		      .byte.b	%00111110
   3431  ffdc
   3432  ffdc		       3c		      .byte.b	%00111100
   3433  ffdd		       66		      .byte.b	%01100110
   3434  ffde		       66		      .byte.b	%01100110
   3435  ffdf		       66		      .byte.b	%01100110
   3436  ffe0		       3c		      .byte.b	%00111100
   3437  ffe1		       66		      .byte.b	%01100110
   3438  ffe2		       66		      .byte.b	%01100110
   3439  ffe3		       3c		      .byte.b	%00111100
   3440  ffe4
   3441  ffe4		       3c		      .byte.b	%00111100
   3442  ffe5		       46		      .byte.b	%01000110
   3443  ffe6		       06		      .byte.b	%00000110
   3444  ffe7		       3e		      .byte.b	%00111110
   3445  ffe8		       66		      .byte.b	%01100110
   3446  ffe9		       66		      .byte.b	%01100110
   3447  ffea		       66		      .byte.b	%01100110
   3448  ffeb		       3c		      .byte.b	%00111100
   3449  ffec
   3450  ffec					      ifnconst	DPC_kernel_options
   3451  ffec
   3452  ffec		       00		      .byte.b	%00000000
   3453  ffed		       00		      .byte.b	%00000000
   3454  ffee		       00		      .byte.b	%00000000
   3455  ffef		       00		      .byte.b	%00000000
   3456  fff0		       00		      .byte.b	%00000000
   3457  fff1		       00		      .byte.b	%00000000
   3458  fff2		       00		      .byte.b	%00000000
   3459  fff3		       00		      .byte.b	%00000000
   3460  fff4
   3461  fff4					      endif
   3462  fff4
   3463  fff4					      endif
   3464  fff4
   3465  fff4				  -	      ifconst	ROM2k
   3466  fff4				  -	      ORG	$F7FC
   3467  fff4					      else
   3468  fff4				  -	      ifconst	bankswitch
   3469  fff4				  -	      if	bankswitch == 8
   3470  fff4				  -	      ORG	$2FF4-bscode_length
   3471  fff4				  -	      RORG	$FFF4-bscode_length
   3472  fff4				  -	      endif
   3473  fff4				  -	      if	bankswitch == 16
   3474  fff4				  -	      ORG	$4FF4-bscode_length
   3475  fff4				  -	      RORG	$FFF4-bscode_length
   3476  fff4				  -	      endif
   3477  fff4				  -	      if	bankswitch == 32
   3478  fff4				  -	      ORG	$8FF4-bscode_length
   3479  fff4				  -	      RORG	$FFF4-bscode_length
   3480  fff4				  -	      endif
   3481  fff4				  -	      if	bankswitch == 64
   3482  fff4				  -	      ORG	$10FE0-bscode_length
   3483  fff4				  -	      RORG	$1FFE0-bscode_length
   3484  fff4				  -	      endif
   3485  fff4					      else
   3486  fffc					      ORG	$FFFC
   3487  fffc					      endif
   3488  fffc					      endif
   3489  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3490  fffc
   3491  fffc				  -	      ifconst	bankswitch
   3492  fffc				  -	      if	bankswitch == 8
   3493  fffc				  -	      ORG	$2FFC
   3494  fffc				  -	      RORG	$FFFC
   3495  fffc				  -	      endif
   3496  fffc				  -	      if	bankswitch == 16
   3497  fffc				  -	      ORG	$4FFC
   3498  fffc				  -	      RORG	$FFFC
   3499  fffc				  -	      endif
   3500  fffc				  -	      if	bankswitch == 32
   3501  fffc				  -	      ORG	$8FFC
   3502  fffc				  -	      RORG	$FFFC
   3503  fffc				  -	      endif
   3504  fffc				  -	      if	bankswitch == 64
   3505  fffc				  -	      ORG	$10FF0
   3506  fffc				  -	      RORG	$1FFF0
   3507  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3508  fffc				  -	      ORG	$10FF8
   3509  fffc				  -	      RORG	$1FFF8
   3510  fffc				  -	      ifconst	superchip
   3511  fffc				  -	      .byte	"E","F","S","C"
   3512  fffc				  -	      else
   3513  fffc				  -	      .byte	"E","F","E","F"
   3514  fffc				  -	      endif
   3515  fffc				  -	      ORG	$10FFC
   3516  fffc				  -	      RORG	$1FFFC
   3517  fffc				  -	      endif
   3518  fffc					      else
   3519  fffc				  -	      ifconst	ROM2k
   3520  fffc				  -	      ORG	$F7FC
   3521  fffc					      else
   3522  fffc					      ORG	$FFFC
   3523  fffc					      endif
   3524  fffc					      endif
   3525  fffc		       00 f0		      .word.w	(start & $ffff)
   3526  fffe		       00 f0		      .word.w	(start & $ffff)
