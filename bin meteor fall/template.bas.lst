------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\template.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\template.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\template.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    w	       =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    u	       =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    p	       =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    m	       =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    i	       =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    g	       =	g
     48  10000 ????
     49  10000 ????		00 d9	    f	       =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 00	    scorefade  =	0
     62  10000 ????
     63  10000 ????		00 2b	    vblank_time =	43
     64  10000 ????		00 25	    overscan_time =	37
     65  10000 ????		00 01	    PFcolors   =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\template.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    w	       =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    u	       =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    p	       =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    m	       =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    i	       =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    g	       =	g
     48  10000 ????
     49  10000 ????		00 d9	    f	       =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 00	    scorefade  =	0
     62  10000 ????
     63  10000 ????		00 2b	    vblank_time =	43
     64  10000 ????		00 25	    overscan_time =	37
     65  10000 ????		00 01	    PFcolors   =	1
------- FILE c:\Users\lucas\OneDrive\Documentos\Atari\Projeto Atariando\template.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 3f f5 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef					      ifconst	PFcolors
    403  f0ef		       a8		      tay
    404  f0f0		       b1 f0		      lda	(pfcolortable),y
    405  f0f2					      ifnconst	backgroundchange
    406  f0f2		       85 08		      sta	COLUPF
    407  f0f4				  -	      else
    408  f0f4				  -	      sta	COLUBK
    409  f0f4					      endif
    410  f0f4				  -	      ifconst	pfrowheight
    411  f0f4				  -	      lda	#pfrowheight
    412  f0f4					      else
    413  f0f4					      ifnconst	pfres
    414  f0f4		       a9 08		      lda	#8
    415  f0f6				  -	      else
    416  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0f6					      endif
    418  f0f6					      endif
    419  f0f6		       85 9c		      sta	temp1
    420  f0f8					      endif
    421  f0f8					      ifnconst	PFcolorandheight
    422  f0f8				  -	      ifnconst	PFcolors
    423  f0f8				  -	      ifnconst	PFheights
    424  f0f8				  -	      ifnconst	no_blank_lines
    425  f0f8				  -			; read paddle 0
    426  f0f8				  -			; lo-res paddle read
    427  f0f8				  -			; bit INPT0
    428  f0f8				  -			; bmi paddleskipread
    429  f0f8				  -			; inc paddle0
    430  f0f8				  -			;donepaddleskip
    431  f0f8				  -	      sleep	10
    432  f0f8				  -	      ifconst	pfrowheight
    433  f0f8				  -	      lda	#pfrowheight
    434  f0f8				  -	      else
    435  f0f8				  -	      ifnconst	pfres
    436  f0f8				  -	      lda	#8
    437  f0f8				  -	      else
    438  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f8				  -	      endif
    440  f0f8				  -	      endif
    441  f0f8				  -	      sta	temp1
    442  f0f8				  -	      endif
    443  f0f8				  -	      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101				  -	      ifnconst	PFcolors
    459  f101				  -	      sleep	10
    460  f101					      else
    461  f101		       a0 7c		      ldy	#124
    462  f103		       b1 f0		      lda	(pfcolortable),y
    463  f105		       85 08		      sta	COLUPF
    464  f107					      endif
    465  f107
    466  f107				  -	      ifconst	PFheights
    467  f107				  -	      ldx	#1
    468  f107				  -			;sleep 4
    469  f107				  -	      sleep	3	; this was over 1 cycle
    470  f107					      else
    471  f107		       a6 ef		      ldx	playfieldpos
    472  f109							;sleep 3
      0  f109					      sleep	2	; this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    474  f10a					      endif
    475  f10a
    476  f10a		       4c 28 f1 	      jmp	enterlastkernel
    477  f10d
    478  f10d				  -	      else
    479  f10d				  -lastkernelline
    480  f10d				  -
    481  f10d				  -	      ifconst	PFheights
    482  f10d				  -	      ldx	#1
    483  f10d				  -			;sleep 5
    484  f10d				  -	      sleep	4	; this was over 1 cycle
    485  f10d				  -	      else
    486  f10d				  -	      ldx	playfieldpos
    487  f10d				  -			;sleep 4
    488  f10d				  -	      sleep	3	; this was over 1 cycle
    489  f10d				  -	      endif
    490  f10d				  -
    491  f10d				  -	      cpx	#0
    492  f10d				  -	      bne	.enterfromNBL
    493  f10d				  -	      jmp	no_blank_lines_bailout
    494  f10d					      endif
    495  f10d
    496  f10d				  -	      if	((<*)>$d5)
    497  f10d				  -	      align	256
    498  f10d					      endif
    499  f10d							; this is a kludge to prevent page wrapping - fix!!!
    500  f10d
    501  f10d				   .skipDrawlastP1
    502  f10d		       a9 00		      lda	#0
    503  f10f		       a8		      tay		; added so we don't cross a page
    504  f110		       4c 3a f1 	      jmp	.continuelastP1
    505  f113
    506  f113				   .endkerloop		; enter at cycle 59??
    507  f113
    508  f113		       ea		      nop
    509  f114
    510  f114				   .enterfromNBL
    511  f114				  -	      ifconst	pfres
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f114				  -	      sty	PF1L	;3
    514  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f114				  -	      sty	PF2L	;3
    516  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f114				  -	      sty	PF1R	; possibly too early?
    518  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f114				  -	      sty	PF2R	;3
    520  f114					      else
    521  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f117		       84 0e		      sty	PF1L	;3
    523  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11c		       84 0f		      sty	PF2L	;3
    525  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f121		       84 0e		      sty	PF1R	; possibly too early?
    527  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f126		       84 0f		      sty	PF2R	;3
    529  f128					      endif
    530  f128
    531  f128				   enterlastkernel
    532  f128		       a5 92		      lda	ballheight
    533  f12a
    534  f12a							; tya
    535  f12a		       c7 89		      dcp	bally
    536  f12c							; sleep 4
    537  f12c
    538  f12c							; sbc stack3
    539  f12c		       2a		      rol
    540  f12d		       2a		      rol
    541  f12e		       85 1f		      sta	ENABL
    542  f130
    543  f130		       a5 8f		      lda	player1height	;3
    544  f132		       c7 86		      dcp	player1y	;5
    545  f134		       90 d7		      bcc	.skipDrawlastP1
    546  f136		       a4 86		      ldy	player1y	;3
    547  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13a							; so it doesn't cross a page boundary!
    549  f13a
    550  f13a				   .continuelastP1
    551  f13a		       85 1c		      sta	GRP1	;3
    552  f13c
    553  f13c					      ifnconst	player1colors
    554  f13c		       a5 87		      lda	missile1height	;3
    555  f13e		       c7 88		      dcp	missile1y	;5
    556  f140				  -	      else
    557  f140				  -	      lda	(player1color),y
    558  f140				  -	      sta	COLUP1
    559  f140					      endif
    560  f140
    561  f140		       ca		      dex
    562  f141							;dec temp4 ; might try putting this above PF writes
    563  f141		       f0 36		      beq	endkernel
    564  f143
    565  f143
    566  f143				  -	      ifconst	pfres
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f143				  -	      sty	PF1L	;3
    569  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f143				  -	      sty	PF2L	;3
    571  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f143				  -	      sty	PF1R	; possibly too early?
    573  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f143				  -	      sty	PF2R	;3
    575  f143					      else
    576  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f146		       84 0e		      sty	PF1L	;3
    578  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14b		       84 0f		      sty	PF2L	;3
    580  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f150		       84 0e		      sty	PF1R	; possibly too early?
    582  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f155		       84 0f		      sty	PF2R	;3
    584  f157					      endif
    585  f157
    586  f157					      ifnconst	player1colors
    587  f157		       2a		      rol		;2
    588  f158		       2a		      rol		;2
    589  f159		       85 1e		      sta	ENAM1	;3
    590  f15b				  -	      else
    591  f15b				  -	      ifnconst	playercolors
    592  f15b				  -	      sleep	7
    593  f15b				  -	      else
    594  f15b				  -	      lda.w	player0colorstore
    595  f15b				  -	      sta	COLUP0
    596  f15b				  -	      endif
    597  f15b					      endif
    598  f15b
    599  f15b		       ad 8e 00 	      lda.w	player0height
    600  f15e		       c7 85		      dcp	player0y
    601  f160		       90 11		      bcc	.skipDrawlastP0
    602  f162		       a4 85		      ldy	player0y
    603  f164		       b1 8a		      lda	(player0pointer),y
    604  f166				   .continuelastP0
    605  f166		       85 1b		      sta	GRP0
    606  f168
    607  f168
    608  f168
    609  f168					      ifnconst	no_blank_lines
    610  f168		       a5 90		      lda	missile0height	;3
    611  f16a		       c7 91		      dcp	missile0y	;5
    612  f16c		       e5 f6		      sbc	stack1
    613  f16e		       85 1d		      sta	ENAM0	;3
    614  f170		       4c 13 f1 	      jmp	.endkerloop
    615  f173				  -	      else
    616  f173				  -	      ifconst	readpaddle
    617  f173				  -	      ldy	currentpaddle
    618  f173				  -	      lda	INPT0,y
    619  f173				  -	      bpl	noreadpaddle2
    620  f173				  -	      inc	paddle
    621  f173				  -	      jmp	.endkerloop
    622  f173				  -noreadpaddle2
    623  f173				  -	      sleep	4
    624  f173				  -	      jmp	.endkerloop
    625  f173				  -	      else		; no_blank_lines and no paddle reading
    626  f173				  -	      pla
    627  f173				  -	      pha		; 14 cycles in 4 bytes
    628  f173				  -	      pla
    629  f173				  -	      pha
    630  f173				  -			; sleep 14
    631  f173				  -	      jmp	.endkerloop
    632  f173				  -	      endif
    633  f173					      endif
    634  f173
    635  f173
    636  f173							; ifconst donepaddleskip
    637  f173							;paddleskipread
    638  f173							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f173							; plus we get a lo-res paddle read
    640  f173							; bmi donepaddleskip
    641  f173							; endif
    642  f173
    643  f173				   .skipDrawlastP0
    644  f173		       a9 00		      lda	#0
    645  f175		       a8		      tay
    646  f176		       4c 66 f1 	      jmp	.continuelastP0
    647  f179
    648  f179				  -	      ifconst	no_blank_lines
    649  f179				  -no_blank_lines_bailout
    650  f179				  -	      ldx	#0
    651  f179					      endif
    652  f179
    653  f179				   endkernel
    654  f179							; 6 digit score routine
    655  f179		       86 0e		      stx	PF1
    656  f17b		       86 0f		      stx	PF2
    657  f17d		       86 0d		      stx	PF0
    658  f17f		       18		      clc
    659  f180
    660  f180				  -	      ifconst	pfrowheight
    661  f180				  -	      lda	#pfrowheight+2
    662  f180					      else
    663  f180					      ifnconst	pfres
    664  f180		       a9 0a		      lda	#10
    665  f182				  -	      else
    666  f182				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f182					      endif
    668  f182					      endif
    669  f182
    670  f182		       e5 ef		      sbc	playfieldpos
    671  f184		       85 ef		      sta	playfieldpos
    672  f186		       8a		      txa
    673  f187
    674  f187				  -	      ifconst	shakescreen
    675  f187				  -	      bit	shakescreen
    676  f187				  -	      bmi	noshakescreen2
    677  f187				  -	      ldx	#$3D
    678  f187				  -noshakescreen2
    679  f187					      endif
    680  f187
    681  f187		       95 02		      sta	WSYNC,x
    682  f189
    683  f189							; STA WSYNC ;first one, need one more
    684  f189		       85 0b		      sta	REFP0
    685  f18b		       85 0c		      sta	REFP1
    686  f18d		       85 1b		      STA	GRP0
    687  f18f		       85 1c		      STA	GRP1
    688  f191							; STA PF1
    689  f191							; STA PF2
    690  f191		       85 2b		      sta	HMCLR
    691  f193		       85 1d		      sta	ENAM0
    692  f195		       85 1e		      sta	ENAM1
    693  f197		       85 1f		      sta	ENABL
    694  f199
    695  f199		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19b		       85 85		      sta	player0y
    697  f19d		       a5 9e		      lda	temp3
    698  f19f		       85 86		      sta	player1y
    699  f1a1					      ifnconst	player1colors
    700  f1a1		       a5 a1		      lda	temp6
    701  f1a3		       85 88		      sta	missile1y
    702  f1a5					      endif
    703  f1a5					      ifnconst	playercolors
    704  f1a5					      ifnconst	readpaddle
    705  f1a5		       a5 a0		      lda	temp5
    706  f1a7		       85 91		      sta	missile0y
    707  f1a9					      endif
    708  f1a9					      endif
    709  f1a9		       a5 f7		      lda	stack2
    710  f1ab		       85 89		      sta	bally
    711  f1ad
    712  f1ad							; strangely, this isn't required any more. might have
    713  f1ad							; resulted from the no_blank_lines score bounce fix
    714  f1ad							;ifconst no_blank_lines
    715  f1ad							;sta WSYNC
    716  f1ad							;endif
    717  f1ad
    718  f1ad		       ad 84 02 	      lda	INTIM
    719  f1b0		       18		      clc
    720  f1b1				  -	      ifnconst	vblank_time
    721  f1b1				  -	      adc	#43+12+87
    722  f1b1					      else
    723  f1b1		       69 8e		      adc	#vblank_time+12+87
    724  f1b3
    725  f1b3					      endif
    726  f1b3							; sta WSYNC
    727  f1b3		       8d 96 02 	      sta	TIM64T
    728  f1b6
    729  f1b6					      ifconst	minikernel
    730  f1b6		       20 67 f4 	      jsr	minikernel
    731  f1b9					      endif
    732  f1b9
    733  f1b9							; now reassign temp vars for score pointers
    734  f1b9
    735  f1b9							; score pointers contain:
    736  f1b9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b9							; swap lo2->temp1
    738  f1b9							; swap lo4->temp3
    739  f1b9							; swap lo6->temp5
    740  f1b9					      ifnconst	noscore
    741  f1b9		       a5 97		      lda	scorepointers+1
    742  f1bb							; ldy temp1
    743  f1bb		       85 9c		      sta	temp1
    744  f1bd							; sty scorepointers+1
    745  f1bd
    746  f1bd		       a5 99		      lda	scorepointers+3
    747  f1bf							; ldy temp3
    748  f1bf		       85 9e		      sta	temp3
    749  f1c1							; sty scorepointers+3
    750  f1c1
    751  f1c1
    752  f1c1		       85 2b		      sta	HMCLR
    753  f1c3		       ba		      tsx
    754  f1c4		       86 f6		      stx	stack1
    755  f1c6		       a2 e0		      ldx	#$E0
    756  f1c8		       86 20		      stx	HMP0
    757  f1ca
    758  f1ca		       a5 a3		      LDA	scorecolor
    759  f1cc		       85 06		      STA	COLUP0
    760  f1ce		       85 07		      STA	COLUP1
    761  f1d0					      ifconst	scorefade
    762  f1d0		       85 f7		      STA	stack2
    763  f1d2					      endif
    764  f1d2				  -	      ifconst	pfscore
    765  f1d2				  -	      lda	pfscorecolor
    766  f1d2				  -	      sta	COLUPF
    767  f1d2					      endif
    768  f1d2		       85 02		      sta	WSYNC
    769  f1d4		       a2 00		      ldx	#0
    770  f1d6		       86 1b		      STx	GRP0
    771  f1d8		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1da
    773  f1da		       a5 9b		      lda	scorepointers+5
    774  f1dc							; ldy temp5
    775  f1dc		       95 a0		      sta	temp5,x
    776  f1de							; sty scorepointers+5
    777  f1de		       a9 ff		      lda	#>scoretable
    778  f1e0		       85 97		      sta	scorepointers+1
    779  f1e2		       85 99		      sta	scorepointers+3
    780  f1e4		       85 9b		      sta	scorepointers+5
    781  f1e6		       85 9d		      sta	temp2
    782  f1e8		       85 9f		      sta	temp4
    783  f1ea		       85 a1		      sta	temp6
    784  f1ec		       a0 07		      LDY	#7
    785  f1ee		       84 25		      STY	VDELP0
    786  f1f0		       85 10		      STA	RESP0
    787  f1f2		       85 11		      STA	RESP1
    788  f1f4
    789  f1f4
    790  f1f4		       a9 03		      LDA	#$03
    791  f1f6		       85 04		      STA	NUSIZ0
    792  f1f8		       85 05		      STA	NUSIZ1
    793  f1fa		       85 26		      STA	VDELP1
    794  f1fc		       a9 f0		      LDA	#$F0
    795  f1fe		       85 21		      STA	HMP1
    796  f200		       b1 96		      lda	(scorepointers),y
    797  f202		       85 1b		      sta	GRP0
    798  f204		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f206		       4c 10 f2 	      jmp	beginscore
    800  f209
    801  f209
    802  f209				  -	      if	((<*)>$d4)
    803  f209				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f209					      endif
    805  f209
    806  f209				   loop2
    807  f209		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20b		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20d				  -	      ifconst	pfscore
    810  f20d				  -	      lda.w	pfscore1
    811  f20d				  -	      sta	PF1
    812  f20d					      else
    813  f20d					      ifconst	scorefade
      0  f20d					      sleep	2
      1  f20d				   .CYCLES    SET	2
      2  f20d
      3  f20d				  -	      IF	.CYCLES < 2
      4  f20d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20d				  -	      ERR
      6  f20d					      ENDIF
      7  f20d
      8  f20d				  -	      IF	.CYCLES & 1
      9  f20d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20d				  -	      nop	0
     11  f20d				  -	      ELSE
     12  f20d				  -	      bit	VSYNC
     13  f20d				  -	      ENDIF
     14  f20d				  -.CYCLES    SET	.CYCLES - 3
     15  f20d					      ENDIF
     16  f20d
     17  f20d					      REPEAT	.CYCLES / 2
     18  f20d		       ea		      nop
     19  f20e					      REPEND
    815  f20e		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210					      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d					      ifconst	scorefade
    830  f21d		       a5 f7		      lda	stack2
    831  f21f				  -	      else
    832  f21f				  -	      sleep	3
    833  f21f					      endif
    834  f21f
    835  f21f				  -	      ifconst	pfscore
    836  f21f				  -	      lda	pfscore2
    837  f21f				  -	      sta	PF1
    838  f21f					      else
    839  f21f					      ifconst	scorefade
    840  f21f		       85 06		      sta	COLUP0
    841  f221		       85 07		      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223					      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d8		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc					      ifconst	rand16
   1391  f3bc		       26 e5		      rol	rand16
   1392  f3be					      endif
   1393  f3be		       90 02		      bcc	noeor
   1394  f3c0		       49 b4		      eor	#$B4
   1395  f3c2				   noeor
   1396  f3c2		       85 a2		      sta	rand
   1397  f3c4					      ifconst	rand16
   1398  f3c4		       45 e5		      eor	rand16
   1399  f3c6					      endif
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1401  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c7
   1403  f3c7				   drawscreen
   1404  f3c7				  -	      ifconst	debugscore
   1405  f3c7				  -	      ldx	#14
   1406  f3c7				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c7				  -
   1408  f3c7				  -	      ifconst	mincycles
   1409  f3c7				  -	      lda	mincycles
   1410  f3c7				  -	      cmp	INTIM
   1411  f3c7				  -	      lda	mincycles
   1412  f3c7				  -	      bcc	nochange
   1413  f3c7				  -	      lda	INTIM
   1414  f3c7				  -	      sta	mincycles
   1415  f3c7				  -nochange
   1416  f3c7				  -	      endif
   1417  f3c7				  -
   1418  f3c7				  -			; cmp #$2B
   1419  f3c7				  -			; bcs no_cycles_left
   1420  f3c7				  -	      bmi	cycles_left
   1421  f3c7				  -	      ldx	#64
   1422  f3c7				  -	      eor	#$ff	;make negative
   1423  f3c7				  -cycles_left
   1424  f3c7				  -	      stx	scorecolor
   1425  f3c7				  -	      and	#$7f	; clear sign bit
   1426  f3c7				  -	      tax
   1427  f3c7				  -	      lda	scorebcd,x
   1428  f3c7				  -	      sta	score+2
   1429  f3c7				  -	      lda	scorebcd1,x
   1430  f3c7				  -	      sta	score+1
   1431  f3c7				  -	      jmp	done_debugscore
   1432  f3c7				  -scorebcd
   1433  f3c7				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c7				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c7				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c7				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c7				  -scorebcd1
   1438  f3c7				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c7				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c7				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c7				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c7				  -done_debugscore
   1443  f3c7					      endif
   1444  f3c7
   1445  f3c7				  -	      ifconst	debugcycles
   1446  f3c7				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c7				  -			; cmp #$2B
   1448  f3c7				  -			; BCC overscan
   1449  f3c7				  -	      bmi	overscan
   1450  f3c7				  -	      sta	COLUBK
   1451  f3c7				  -	      bcs	doneoverscan
   1452  f3c7					      endif
   1453  f3c7
   1454  f3c7				   overscan
   1455  f3c7				  -	      ifconst	interlaced
   1456  f3c7				  -	      PHP
   1457  f3c7				  -	      PLA
   1458  f3c7				  -	      EOR	#4	; flip interrupt bit
   1459  f3c7				  -	      PHA
   1460  f3c7				  -	      PLP
   1461  f3c7				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c7				  -	      TAX		; save it for later
   1463  f3c7					      endif
   1464  f3c7
   1465  f3c7				   overscanloop
   1466  f3c7		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ca		       30 fb		      bmi	overscanloop
   1468  f3cc				   doneoverscan
   1469  f3cc
   1470  f3cc							;do VSYNC
   1471  f3cc
   1472  f3cc				  -	      ifconst	interlaced
   1473  f3cc				  -	      CPX	#4
   1474  f3cc				  -	      BNE	oddframevsync
   1475  f3cc					      endif
   1476  f3cc
   1477  f3cc		       a9 02		      lda	#2
   1478  f3ce		       85 02		      sta	WSYNC
   1479  f3d0		       85 00		      sta	VSYNC
   1480  f3d2		       85 02		      STA	WSYNC
   1481  f3d4		       85 02		      STA	WSYNC
   1482  f3d6		       4a		      lsr
   1483  f3d7		       85 02		      STA	WSYNC
   1484  f3d9		       85 00		      STA	VSYNC
   1485  f3db		       85 01		      sta	VBLANK
   1486  f3dd				  -	      ifnconst	overscan_time
   1487  f3dd				  -	      lda	#37+128
   1488  f3dd					      else
   1489  f3dd		       a9 a5		      lda	#overscan_time+128
   1490  f3df					      endif
   1491  f3df		       8d 96 02 	      sta	TIM64T
   1492  f3e2
   1493  f3e2				  -	      ifconst	interlaced
   1494  f3e2				  -	      jmp	postsync
   1495  f3e2				  -
   1496  f3e2				  -oddframevsync
   1497  f3e2				  -	      sta	WSYNC
   1498  f3e2				  -
   1499  f3e2				  -	      LDA	($80,X)	; 11 waste
   1500  f3e2				  -	      LDA	($80,X)	; 11 waste
   1501  f3e2				  -	      LDA	($80,X)	; 11 waste
   1502  f3e2				  -
   1503  f3e2				  -	      lda	#2
   1504  f3e2				  -	      sta	VSYNC
   1505  f3e2				  -	      sta	WSYNC
   1506  f3e2				  -	      sta	WSYNC
   1507  f3e2				  -	      sta	WSYNC
   1508  f3e2				  -
   1509  f3e2				  -	      LDA	($80,X)	; 11 waste
   1510  f3e2				  -	      LDA	($80,X)	; 11 waste
   1511  f3e2				  -	      LDA	($80,X)	; 11 waste
   1512  f3e2				  -
   1513  f3e2				  -	      lda	#0
   1514  f3e2				  -	      sta	VSYNC
   1515  f3e2				  -	      sta	VBLANK
   1516  f3e2				  -	      ifnconst	overscan_time
   1517  f3e2				  -	      lda	#37+128
   1518  f3e2				  -	      else
   1519  f3e2				  -	      lda	#overscan_time+128
   1520  f3e2				  -	      endif
   1521  f3e2				  -	      sta	TIM64T
   1522  f3e2				  -
   1523  f3e2				  -postsync
   1524  f3e2					      endif
   1525  f3e2
   1526  f3e2				  -	      ifconst	legacy
   1527  f3e2				  -	      if	legacy < 100
   1528  f3e2				  -	      ldx	#4
   1529  f3e2				  -adjustloop
   1530  f3e2				  -	      lda	player0x,x
   1531  f3e2				  -	      sec
   1532  f3e2				  -	      sbc	#14	;?
   1533  f3e2				  -	      sta	player0x,x
   1534  f3e2				  -	      dex
   1535  f3e2				  -	      bpl	adjustloop
   1536  f3e2				  -	      endif
   1537  f3e2					      endif
   1538  f3e2				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e2				  -	      repeat	($fa-(<*))
   1540  f3e2				  -	      nop
   1541  f3e2				  -	      repend
   1542  f3e2					      endif
   1543  f3e2		       85 02		      sta	WSYNC
   1544  f3e4		       a2 04		      ldx	#4
      0  f3e6					      SLEEP	3
      1  f3e6				   .CYCLES    SET	3
      2  f3e6
      3  f3e6				  -	      IF	.CYCLES < 2
      4  f3e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e6				  -	      ERR
      6  f3e6					      ENDIF
      7  f3e6
      8  f3e6					      IF	.CYCLES & 1
      9  f3e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e6		       04 00		      nop	0
     11  f3e8				  -	      ELSE
     12  f3e8				  -	      bit	VSYNC
     13  f3e8					      ENDIF
     14  f3e8				   .CYCLES    SET	.CYCLES - 3
     15  f3e8					      ENDIF
     16  f3e8
     17  f3e8				  -	      REPEAT	.CYCLES / 2
     18  f3e8				  -	      nop
     19  f3e8					      REPEND
   1546  f3e8				   HorPosLoop		; 5
   1547  f3e8		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ea		       38		      sec		;+2 11
   1549  f3eb				   DivideLoop
   1550  f3eb		       e9 0f		      sbc	#15
   1551  f3ed		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ef		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f1		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f3		       85 02		      sta	WSYNC
   1555  f3f5		       ca		      dex
   1556  f3f6		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f8							; 4
   1558  f3f8
   1559  f3f8		       a2 04		      ldx	#4
   1560  f3fa		       b4 9c		      ldy	temp1,X
   1561  f3fc		       b9 58 f3 	      lda	repostable-256,Y
   1562  f3ff		       95 20		      sta	HMP0,X	;+14 18
   1563  f401
   1564  f401		       ca		      dex
   1565  f402		       b4 9c		      ldy	temp1,X
   1566  f404		       b9 58 f3 	      lda	repostable-256,Y
   1567  f407		       95 20		      sta	HMP0,X	;+14 32
   1568  f409
   1569  f409		       ca		      dex
   1570  f40a		       b4 9c		      ldy	temp1,X
   1571  f40c		       b9 58 f3 	      lda	repostable-256,Y
   1572  f40f		       95 20		      sta	HMP0,X	;+14 46
   1573  f411
   1574  f411		       ca		      dex
   1575  f412		       b4 9c		      ldy	temp1,X
   1576  f414		       b9 58 f3 	      lda	repostable-256,Y
   1577  f417		       95 20		      sta	HMP0,X	;+14 60
   1578  f419
   1579  f419		       ca		      dex
   1580  f41a		       b4 9c		      ldy	temp1,X
   1581  f41c		       b9 58 f3 	      lda	repostable-256,Y
   1582  f41f		       95 20		      sta	HMP0,X	;+14 74
   1583  f421
   1584  f421		       85 02		      sta	WSYNC
   1585  f423
   1586  f423		       85 2a		      sta	HMOVE	;+3 3
   1587  f425
   1588  f425
   1589  f425				  -	      ifconst	legacy
   1590  f425				  -	      if	legacy < 100
   1591  f425				  -	      ldx	#4
   1592  f425				  -adjustloop2
   1593  f425				  -	      lda	player0x,x
   1594  f425				  -	      clc
   1595  f425				  -	      adc	#14	;?
   1596  f425				  -	      sta	player0x,x
   1597  f425				  -	      dex
   1598  f425				  -	      bpl	adjustloop2
   1599  f425				  -	      endif
   1600  f425					      endif
   1601  f425
   1602  f425
   1603  f425
   1604  f425
   1605  f425							;set score pointers
   1606  f425		       a7 95		      lax	score+2
   1607  f427		       20 58 f4 	      jsr	scorepointerset
   1608  f42a		       84 9b		      sty	scorepointers+5
   1609  f42c		       86 98		      stx	scorepointers+2
   1610  f42e		       a7 94		      lax	score+1
   1611  f430		       20 58 f4 	      jsr	scorepointerset
   1612  f433		       84 9a		      sty	scorepointers+4
   1613  f435		       86 97		      stx	scorepointers+1
   1614  f437		       a7 93		      lax	score
   1615  f439		       20 58 f4 	      jsr	scorepointerset
   1616  f43c		       84 99		      sty	scorepointers+3
   1617  f43e		       86 96		      stx	scorepointers
   1618  f440
   1619  f440				   vblk
   1620  f440							; run possible vblank bB code
   1621  f440				  -	      ifconst	vblank_bB_code
   1622  f440				  -	      jsr	vblank_bB_code
   1623  f440					      endif
   1624  f440				   vblk2
   1625  f440		       ad 84 02 	      LDA	INTIM
   1626  f443		       30 fb		      bmi	vblk2
   1627  f445		       4c 34 f0 	      jmp	kernel
   1628  f448
   1629  f448
   1630  f448		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f451		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f458				   repostable
   1633  f458
   1634  f458				   scorepointerset
   1635  f458		       29 0f		      and	#$0F
   1636  f45a		       0a		      asl
   1637  f45b		       0a		      asl
   1638  f45c		       0a		      asl
   1639  f45d		       69 9c		      adc	#<scoretable
   1640  f45f		       a8		      tay
   1641  f460		       8a		      txa
   1642  f461							; and #$F0
   1643  f461							; lsr
   1644  f461		       4b f0		      asr	#$F0
   1645  f463		       69 9c		      adc	#<scoretable
   1646  f465		       aa		      tax
   1647  f466		       60		      rts
   1648  f467							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1649  f467
   1650  f467				   minikernel		; display up to 6 lives on screen
   1651  f467		       85 02		      sta	WSYNC
   1652  f469		       a2 20		      ldx	#$20
   1653  f46b		       86 21		      stx	HMP1
   1654  f46d		       86 25		      stx	VDELP0
   1655  f46f		       a5 f3		      lda	lives
   1656  f471		       4a		      lsr
   1657  f472		       4a		      lsr
   1658  f473		       4a		      lsr
   1659  f474		       4a		      lsr
   1660  f475		       4a		      lsr
   1661  f476		       85 10		      sta	RESP0
   1662  f478		       85 11		      sta	RESP1
   1663  f47a		       86 26		      stx	VDELP1
   1664  f47c		       aa		      tax
   1665  f47d		       bd 17 f5 	      lda	lifenusiz0table,x
   1666  f480		       85 04		      sta	NUSIZ0
   1667  f482		       bd 16 f5 	      lda	lifenusiz1table,x
   1668  f485		       85 05		      sta	NUSIZ1
   1669  f487		       a5 f4		      lda	lifecolor
   1670  f489		       85 06		      sta	COLUP0
   1671  f48b		       85 07		      sta	COLUP1
   1672  f48d		       a9 10		      lda	#$10
   1673  f48f		       85 20		      sta	HMP0
   1674  f491
   1675  f491		       a5 f5		      lda	statusbarlength
   1676  f493		       4a		      lsr
   1677  f494		       4a		      lsr
   1678  f495		       4a		      lsr		; 0-31
   1679  f496							; 3 cases: 0-7, 8-15, 16-24
   1680  f496							; if 0-7, temp1=val, temp2=0, temp3=0
   1681  f496							; if 8-15, temp1=255, temp2=val (rev), temp3=0
   1682  f496							; if 16-23, temp1=255, temp2=255, temp3=val
   1683  f496		       a8		      tay
   1684  f497
   1685  f497		       85 2a		      sta	HMOVE	;cycle 74?
   1686  f499
   1687  f499					      ifconst	statusbarcolor
   1688  f499							; only write COLUPF if color variable exists, otherwise use existing PF color
   1689  f499		       a5 e6		      lda	statusbarcolor
   1690  f49b		       85 08		      sta	COLUPF
   1691  f49d					      endif
   1692  f49d
   1693  f49d		       c0 08		      cpy	#8
   1694  f49f		       90 17		      bcc	zero_7
   1695  f4a1		       c0 10		      cpy	#16
   1696  f4a3		       90 23		      bcc	eight_15
   1697  f4a5		       a9 ff		      lda	#255
   1698  f4a7		       85 9c		      sta	temp1
   1699  f4a9		       85 9d		      sta	temp2
   1700  f4ab		       b9 0f f5 	      lda	statustable-16,y
   1701  f4ae		       85 9e		      sta	temp3
   1702  f4b0		       b9 1f f5 	      lda	statustable,y
   1703  f4b3		       85 9f		      sta	temp4
   1704  f4b5		       4c d7 f4 	      jmp	startlifedisplay
   1705  f4b8
   1706  f4b8				   zero_7
   1707  f4b8		       a9 00		      lda	#0
   1708  f4ba		       85 9f		      sta	temp4
   1709  f4bc		       85 9e		      sta	temp3
   1710  f4be		       85 9d		      sta	temp2
   1711  f4c0		       b9 1f f5 	      lda	statustable,y
   1712  f4c3		       85 9c		      sta	temp1
   1713  f4c5		       4c d7 f4 	      jmp	startlifedisplay
   1714  f4c8				   eight_15
   1715  f4c8		       a9 ff		      lda	#255
   1716  f4ca		       85 9c		      sta	temp1
   1717  f4cc		       a9 00		      lda	#0
   1718  f4ce		       85 9f		      sta	temp4
   1719  f4d0		       85 9e		      sta	temp3
   1720  f4d2		       b9 2f f5 	      lda	statustable+16,y
   1721  f4d5		       85 9d		      sta	temp2
   1722  f4d7				   startlifedisplay
   1723  f4d7		       a0 07		      ldy	#7
   1724  f4d9				   lifeloop
   1725  f4d9		       85 02		      sta	WSYNC
   1726  f4db		       86 0d		      stx	PF0
   1727  f4dd		       b1 f2		      lda	(lifepointer),y
   1728  f4df		       e0 00		      cpx	#0
   1729  f4e1		       d0 01		      bne	onelife
   1730  f4e3		       0c		      .byte.b	$0C
   1731  f4e4				   onelife
   1732  f4e4		       85 1b		      sta	GRP0
   1733  f4e6
   1734  f4e6		       e0 02		      cpx	#2
   1735  f4e8		       b0 01		      bcs	nolives
   1736  f4ea		       0c		      .byte.b	$0C
   1737  f4eb				   nolives
   1738  f4eb		       85 1c		      sta	GRP1
   1739  f4ed		       a5 9f		      lda	temp4
   1740  f4ef		       85 0d		      sta	PF0
   1741  f4f1		       a5 9c		      lda	temp1
   1742  f4f3		       85 0f		      sta	PF2
   1743  f4f5		       a5 9e		      lda	temp3
   1744  f4f7		       85 0e		      sta	PF1
   1745  f4f9		       a5 9d		      lda	temp2
   1746  f4fb		       85 0f		      sta	PF2	;cycle 48!
   1747  f4fd		       68		      pla		; waste 14 cycles in 4 bytes
   1748  f4fe		       48		      pha		;
   1749  f4ff		       68		      pla		;
   1750  f500		       48		      pha		; Shouldn't hurt anything!
   1751  f501		       a9 00		      lda	#0
   1752  f503		       88		      dey
   1753  f504		       85 0e		      sta	PF1
   1754  f506		       10 d1		      bpl	lifeloop
   1755  f508		       85 02		      sta	WSYNC
   1756  f50a		       c8		      iny
   1757  f50b		       84 0d		      sty	PF0
   1758  f50d		       84 0f		      sty	PF2
   1759  f50f		       84 0e		      sty	PF1
   1760  f511		       84 1b		      sty	GRP0
   1761  f513		       84 1c		      sty	GRP1
   1762  f515		       60		      rts
   1763  f516
   1764  f516				  -	      if	(<*) > $F5
   1765  f516				  -	      align	256
   1766  f516					      endif
   1767  f516				   lifenusiz1table
   1768  f516		       00		      .byte.b	0
   1769  f517				   lifenusiz0table
   1770  f517		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
   1771  f51f
   1772  f51f				   statustable		; warning: page-wrapping might cause issues
   1773  f51f							;0-7 and 16+
   1774  f51f		       00		      .byte.b	%00000000
   1775  f520		       01		      .byte.b	%00000001
   1776  f521		       03		      .byte.b	%00000011
   1777  f522		       07		      .byte.b	%00000111
   1778  f523		       0f		      .byte.b	%00001111
   1779  f524		       1f		      .byte.b	%00011111
   1780  f525		       3f		      .byte.b	%00111111
   1781  f526		       7f		      .byte.b	%01111111
   1782  f527		       ff		      .byte.b	255
   1783  f528		       ff		      .byte.b	255
   1784  f529		       ff		      .byte.b	255
   1785  f52a		       ff		      .byte.b	255
   1786  f52b		       ff		      .byte.b	255
   1787  f52c		       ff		      .byte.b	255
   1788  f52d		       ff		      .byte.b	255
   1789  f52e		       ff		      .byte.b	255
   1790  f52f							; 8-15
   1791  f52f		       00		      .byte.b	0
   1792  f530		       00		      .byte.b	0
   1793  f531		       00		      .byte.b	0
   1794  f532		       00		      .byte.b	0
   1795  f533		       00		      .byte.b	0
   1796  f534		       00		      .byte.b	0
   1797  f535		       00		      .byte.b	0
   1798  f536		       00		      .byte.b	0
   1799  f537		       00		      .byte.b	%00000000
   1800  f538		       80		      .byte.b	%10000000
   1801  f539		       c0		      .byte.b	%11000000
   1802  f53a		       e0		      .byte.b	%11100000
   1803  f53b		       f0		      .byte.b	%11110000
   1804  f53c		       f8		      .byte.b	%11111000
   1805  f53d		       fc		      .byte.b	%11111100
   1806  f53e		       fe		      .byte.b	%11111110
   1807  f53f
   1808  f53f				   game
   1809  f53f				   .L00 		;  rem Generated 19/07/2022 10:00:00 by Visual bB Version 1.0.0.568
   1810  f53f
   1811  f53f				   .L01 		;  rem ************************************************************
   1812  f53f
   1813  f53f				   .L02 		;  rem *<Game Name>						   *
   1814  f53f
   1815  f53f				   .L03 		;  rem *<slogan>						   *
   1816  f53f
   1817  f53f				   .L04 		;  rem *<Atariando - Guilherme Xavier and Augusto Baffa>		  *
   1818  f53f
   1819  f53f				   .L05 		;  rem *<guix@puc-rio.br / abaffa@puc-rio.br>			   *
   1820  f53f
   1821  f53f				   .L06 		;  rem *<free> 						   *
   1822  f53f
   1823  f53f				   .L07 		;  rem ************************************************************
   1824  f53f
   1825  f53f				   .
   1826  f53f							; 
   1827  f53f
   1828  f53f				   .L08 		;  set kernel_options pfcolors
   1829  f53f
   1830  f53f				   .L09 		;  set tv ntsc
   1831  f53f
   1832  f53f				   .
   1833  f53f							; 
   1834  f53f
   1835  f53f				   .L010		;  include 6lives_statusbar.asm
   1836  f53f
   1837  f53f				   .L011		;  statusbarlength  =	144
   1838  f53f
   1839  f53f		       a9 90		      LDA	#144
   1840  f541		       85 f5		      STA	statusbarlength
   1841  f543				   .L012		;  const scorefade  =	0
   1842  f543
   1843  f543				   .L013		;  scorecolor	=  $1C
   1844  f543
   1845  f543		       a9 1c		      LDA	#$1C
   1846  f545		       85 a3		      STA	scorecolor
   1847  f547				   .
   1848  f547							; 
   1849  f547
   1850  f547				   .L014		;  dim sounda	=  a
   1851  f547
   1852  f547				   .L015		;  dim soundb	=  b
   1853  f547
   1854  f547				   .L016		;  dim counter  =  c
   1855  f547
   1856  f547				   .L017		;  dim d  =  d
   1857  f547
   1858  f547				   .L018		;  dim e  =  e
   1859  f547
   1860  f547				   .L019		;  dim f  =  f
   1861  f547
   1862  f547				   .L020		;  dim g  =  g
   1863  f547
   1864  f547				   .L021		;  dim h  =  h
   1865  f547
   1866  f547				   .L022		;  dim i  =  i
   1867  f547
   1868  f547				   .L023		;  dim j  =  j
   1869  f547
   1870  f547				   .L024		;  dim k  =  k
   1871  f547
   1872  f547				   .L025		;  dim l  =  l
   1873  f547
   1874  f547				   .L026		;  dim m  =  m
   1875  f547
   1876  f547				   .L027		;  dim n  =  n
   1877  f547
   1878  f547				   .L028		;  dim o  =  o
   1879  f547
   1880  f547				   .L029		;  dim p  =  p
   1881  f547
   1882  f547				   .L030		;  dim q  =  q
   1883  f547
   1884  f547				   .L031		;  dim rand16	=  r
   1885  f547
   1886  f547				   .L032		;  dim statusbarcolor	=  s
   1887  f547
   1888  f547				   .L033		;  dim t  =  t
   1889  f547
   1890  f547				   .L034		;  dim u  =  u
   1891  f547
   1892  f547				   .L035		;  dim v  =  v
   1893  f547
   1894  f547				   .L036		;  dim w  =  w
   1895  f547
   1896  f547				   .L037		;  dim x  =  x
   1897  f547
   1898  f547				   .L038		;  dim y  =  y
   1899  f547
   1900  f547				   .L039		;  dim z  =  z
   1901  f547
   1902  f547				   .L040		;  dim _sc1  =  score
   1903  f547
   1904  f547				   .L041		;  dim _sc2  =  score + 1
   1905  f547
   1906  f547				   .L042		;  dim _sc3  =  score + 2
   1907  f547
   1908  f547				   .
   1909  f547							; 
   1910  f547
   1911  f547				   .L043		;  rem start/restart ........................................................................
   1912  f547
   1913  f547				   .
   1914  f547							; 
   1915  f547
   1916  f547				   .start_restart
   1917  f547							; start_restart
   1918  f547
   1919  f547				   .
   1920  f547							; 
   1921  f547
   1922  f547				   .L044		;  AUDV0  =  0  :  AUDV1  =  0
   1923  f547
   1924  f547		       a9 00		      LDA	#0
   1925  f549		       85 19		      STA	AUDV0
   1926  f54b		       85 1a		      STA	AUDV1
   1927  f54d				   .L045		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1928  f54d
   1929  f54d		       a9 00		      LDA	#0
   1930  f54f		       85 d4		      STA	a
   1931  f551		       85 d5		      STA	b
   1932  f553		       85 d6		      STA	c
   1933  f555		       85 d7		      STA	d
   1934  f557		       85 d8		      STA	e
   1935  f559		       85 d9		      STA	f
   1936  f55b		       85 da		      STA	g
   1937  f55d		       85 db		      STA	h
   1938  f55f		       85 dc		      STA	i
   1939  f561				   .L046		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1940  f561
   1941  f561		       a9 00		      LDA	#0
   1942  f563		       85 dd		      STA	j
   1943  f565		       85 de		      STA	k
   1944  f567		       85 df		      STA	l
   1945  f569		       85 e0		      STA	m
   1946  f56b		       85 e1		      STA	n
   1947  f56d		       85 e2		      STA	o
   1948  f56f		       85 e3		      STA	p
   1949  f571		       85 e4		      STA	q
   1950  f573		       85 e5		      STA	r
   1951  f575				   .L047		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  z  =  0
   1952  f575
   1953  f575		       a9 00		      LDA	#0
   1954  f577		       85 e6		      STA	s
   1955  f579		       85 e7		      STA	t
   1956  f57b		       85 e8		      STA	u
   1957  f57d		       85 e9		      STA	v
   1958  f57f		       85 ea		      STA	w
   1959  f581		       85 eb		      STA	x
   1960  f583		       85 ed		      STA	z
   1961  f585				   .L048		;  player0y  =  200  :  player1y  =  200  :  bally  =	200
   1962  f585
   1963  f585		       a9 c8		      LDA	#200
   1964  f587		       85 85		      STA	player0y
   1965  f589		       85 86		      STA	player1y
   1966  f58b		       85 89		      STA	bally
   1967  f58d				   .
   1968  f58d							; 
   1969  f58d
   1970  f58d				   .L049		;  rem title ........................................................................
   1971  f58d
   1972  f58d				   .
   1973  f58d							; 
   1974  f58d
   1975  f58d				   .titlescreen
   1976  f58d							; titlescreen
   1977  f58d
   1978  f58d				   .
   1979  f58d							; 
   1980  f58d
   1981  f58d				   .L050		;  scorecolor	=  $1E
   1982  f58d
   1983  f58d		       a9 1e		      LDA	#$1E
   1984  f58f		       85 a3		      STA	scorecolor
   1985  f591				   .L051		;  statusbarcolor  =  $00
   1986  f591
   1987  f591		       a9 00		      LDA	#$00
   1988  f593		       85 e6		      STA	statusbarcolor
   1989  f595				   .L052		;  COLUBK  =  $00
   1990  f595
   1991  f595		       a9 00		      LDA	#$00
   1992  f597		       85 09		      STA	COLUBK
   1993  f599				   .
   1994  f599							; 
   1995  f599
   1996  f599				   .L053		;  playfield:
   1997  f599
   1998  f599				  -	      ifconst	pfres
   1999  f599				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2000  f599					      else
   2001  f599		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2002  f59b					      endif
   2003  f59b		       4c ca f5 	      jmp	pflabel0
   2004  f59e				   PF_data0
   2005  f59e		       00 00		      .byte.b	%00000000, %00000000
   2006  f5a0					      if	(pfwidth>2)
   2007  f5a0		       80 00		      .byte.b	%10000000, %00000000
   2008  f5a2					      endif
   2009  f5a2		       3a 1d		      .byte.b	%00111010, %00011101
   2010  f5a4					      if	(pfwidth>2)
   2011  f5a4		       87 3d		      .byte.b	%10000111, %00111101
   2012  f5a6					      endif
   2013  f5a6		       2a 05		      .byte.b	%00101010, %00000101
   2014  f5a8					      if	(pfwidth>2)
   2015  f5a8		       80 21		      .byte.b	%10000000, %00100001
   2016  f5aa					      endif
   2017  f5aa		       3a 05		      .byte.b	%00111010, %00000101
   2018  f5ac					      if	(pfwidth>2)
   2019  f5ac		       81 31		      .byte.b	%10000001, %00110001
   2020  f5ae					      endif
   2021  f5ae		       23 9d		      .byte.b	%00100011, %10011101
   2022  f5b0					      if	(pfwidth>2)
   2023  f5b0		       c3 18		      .byte.b	%11000011, %00011000
   2024  f5b2					      endif
   2025  f5b2		       00 80		      .byte.b	%00000000, %10000000
   2026  f5b4					      if	(pfwidth>2)
   2027  f5b4		       c6 0c		      .byte.b	%11000110, %00001100
   2028  f5b6					      endif
   2029  f5b6		       19 4e		      .byte.b	%00011001, %01001110
   2030  f5b8					      if	(pfwidth>2)
   2031  f5b8		       a4 04		      .byte.b	%10100100, %00000100
   2032  f5ba					      endif
   2033  f5ba		       15 4e		      .byte.b	%00010101, %01001110
   2034  f5bc					      if	(pfwidth>2)
   2035  f5bc		       a7 3d		      .byte.b	%10100111, %00111101
   2036  f5be					      endif
   2037  f5be		       00 60		      .byte.b	%00000000, %01100000
   2038  f5c0					      if	(pfwidth>2)
   2039  f5c0		       b0 00		      .byte.b	%10110000, %00000000
   2040  f5c2					      endif
   2041  f5c2		       00 30		      .byte.b	%00000000, %00110000
   2042  f5c4					      if	(pfwidth>2)
   2043  f5c4		       98 00		      .byte.b	%10011000, %00000000
   2044  f5c6					      endif
   2045  f5c6		       00 9c		      .byte.b	%00000000, %10011100
   2046  f5c8					      if	(pfwidth>2)
   2047  f5c8		       ce 00		      .byte.b	%11001110, %00000000
   2048  f5ca					      endif
   2049  f5ca				   pflabel0
   2050  f5ca		       bd 9e f5 	      lda	PF_data0,x
   2051  f5cd		       95 a4		      sta	playfield,x
   2052  f5cf		       ca		      dex
   2053  f5d0		       10 f8		      bpl	pflabel0
   2054  f5d2				   .
   2055  f5d2							; 
   2056  f5d2
   2057  f5d2				   .L054		;  pfcolors:
   2058  f5d2
   2059  f5d2		       a9 60		      lda	# $60
   2060  f5d4		       85 08		      sta	COLUPF
   2061  f5d6				  -	      ifconst	pfres
   2062  f5d6				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2063  f5d6					      else
   2064  f5d6		       a9 f7		      lda	#>(pfcolorlabel13-84)
   2065  f5d8					      endif
   2066  f5d8		       85 f1		      sta	pfcolortable+1
   2067  f5da				  -	      ifconst	pfres
   2068  f5da				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2069  f5da					      else
   2070  f5da		       a9 3d		      lda	#<(pfcolorlabel13-84)
   2071  f5dc					      endif
   2072  f5dc		       85 f0		      sta	pfcolortable
   2073  f5de				   .
   2074  f5de							; 
   2075  f5de
   2076  f5de				   .L055		;  drawscreen
   2077  f5de
   2078  f5de		       20 c7 f3 	      jsr	drawscreen
   2079  f5e1				   .
   2080  f5e1							; 
   2081  f5e1
   2082  f5e1				   .L056		;  if joy0fire then goto main_setup
   2083  f5e1
   2084  f5e1		       24 0c		      bit	INPT4
   2085  f5e3		       30 03		      BMI	.skipL056
   2086  f5e5				   .condpart0
   2087  f5e5		       4c eb f5 	      jmp	.main_setup
   2088  f5e8
   2089  f5e8				   .skipL056
   2090  f5e8				   .
   2091  f5e8							; 
   2092  f5e8
   2093  f5e8				   .L057		;  goto titlescreen
   2094  f5e8
   2095  f5e8		       4c 8d f5 	      jmp	.titlescreen
   2096  f5eb
   2097  f5eb				   .
   2098  f5eb							; 
   2099  f5eb
   2100  f5eb				   .L058		;  rem main_setup ........................................................................
   2101  f5eb
   2102  f5eb				   .
   2103  f5eb							; 
   2104  f5eb
   2105  f5eb				   .main_setup
   2106  f5eb							; main_setup
   2107  f5eb
   2108  f5eb				   .
   2109  f5eb							; 
   2110  f5eb
   2111  f5eb				   .L059		;  player0x  =  45
   2112  f5eb
   2113  f5eb		       a9 2d		      LDA	#45
   2114  f5ed		       85 80		      STA	player0x
   2115  f5ef				   .L060		;  player0y  =  70
   2116  f5ef
   2117  f5ef		       a9 46		      LDA	#70
   2118  f5f1		       85 85		      STA	player0y
   2119  f5f3				   .
   2120  f5f3							; 
   2121  f5f3
   2122  f5f3				   .L061		;  player1x  =  55
   2123  f5f3
   2124  f5f3		       a9 37		      LDA	#55
   2125  f5f5		       85 81		      STA	player1x
   2126  f5f7				   .L062		;  player1y  =  55
   2127  f5f7
   2128  f5f7		       a9 37		      LDA	#55
   2129  f5f9		       85 86		      STA	player1y
   2130  f5fb				   .
   2131  f5fb							; 
   2132  f5fb
   2133  f5fb				   .L063		;  ballx  =  55
   2134  f5fb
   2135  f5fb		       a9 37		      LDA	#55
   2136  f5fd		       85 84		      STA	ballx
   2137  f5ff				   .L064		;  bally  =  30
   2138  f5ff
   2139  f5ff		       a9 1e		      LDA	#30
   2140  f601		       85 89		      STA	bally
   2141  f603				   .
   2142  f603							; 
   2143  f603
   2144  f603				   .L065		;  missile0x  =  100
   2145  f603
   2146  f603		       a9 64		      LDA	#100
   2147  f605		       85 82		      STA	missile0x
   2148  f607				   .L066		;  missile0y  =  55
   2149  f607
   2150  f607		       a9 37		      LDA	#55
   2151  f609		       85 91		      STA	missile0y
   2152  f60b				   .
   2153  f60b							; 
   2154  f60b
   2155  f60b				   .L067		;  missile1x  =  120
   2156  f60b
   2157  f60b		       a9 78		      LDA	#120
   2158  f60d		       85 83		      STA	missile1x
   2159  f60f				   .L068		;  missile1y  =  55
   2160  f60f
   2161  f60f		       a9 37		      LDA	#55
   2162  f611		       85 88		      STA	missile1y
   2163  f613				   .
   2164  f613							; 
   2165  f613
   2166  f613				   .L069		;  scorecolor	=  $1C
   2167  f613
   2168  f613		       a9 1c		      LDA	#$1C
   2169  f615		       85 a3		      STA	scorecolor
   2170  f617				   .L070		;  statusbarcolor  =  $1C
   2171  f617
   2172  f617		       a9 1c		      LDA	#$1C
   2173  f619		       85 e6		      STA	statusbarcolor
   2174  f61b				   .
   2175  f61b							; 
   2176  f61b
   2177  f61b				   .
   2178  f61b							; 
   2179  f61b
   2180  f61b				   .L071		;  NUSIZ0  =  $00
   2181  f61b
   2182  f61b		       a9 00		      LDA	#$00
   2183  f61d		       85 04		      STA	NUSIZ0
   2184  f61f				   .L072		;  NUSIZ1  =  $00
   2185  f61f
   2186  f61f		       a9 00		      LDA	#$00
   2187  f621		       85 05		      STA	NUSIZ1
   2188  f623				   .L073		;  COLUBK  =  $00
   2189  f623
   2190  f623		       a9 00		      LDA	#$00
   2191  f625		       85 09		      STA	COLUBK
   2192  f627				   .L074		;  COLUP0  =  $02
   2193  f627
   2194  f627		       a9 02		      LDA	#$02
   2195  f629		       85 06		      STA	COLUP0
   2196  f62b				   .L075		;  COLUP1  =  $08
   2197  f62b
   2198  f62b		       a9 08		      LDA	#$08
   2199  f62d		       85 07		      STA	COLUP1
   2200  f62f				   .L076		;  COLUPF  =  $1E
   2201  f62f
   2202  f62f		       a9 1e		      LDA	#$1E
   2203  f631		       85 08		      STA	COLUPF
   2204  f633				   .
   2205  f633							; 
   2206  f633
   2207  f633				   .L077		;  rem mainloop ........................................................................
   2208  f633
   2209  f633				   .
   2210  f633							; 
   2211  f633
   2212  f633				   .main
   2213  f633							; main
   2214  f633
   2215  f633				   .
   2216  f633							; 
   2217  f633
   2218  f633				   .L078		;  COLUP0  =  $02
   2219  f633
   2220  f633		       a9 02		      LDA	#$02
   2221  f635		       85 06		      STA	COLUP0
   2222  f637				   .L079		;  COLUP1  =  $08
   2223  f637
   2224  f637		       a9 08		      LDA	#$08
   2225  f639		       85 07		      STA	COLUP1
   2226  f63b				   .
   2227  f63b							; 
   2228  f63b
   2229  f63b				   .L080		;  ballheight	=  2
   2230  f63b
   2231  f63b		       a9 02		      LDA	#2
   2232  f63d		       85 92		      STA	ballheight
   2233  f63f				   .L081		;  bally  =  bally  +	2
   2234  f63f
   2235  f63f		       a5 89		      LDA	bally
   2236  f641		       18		      CLC
   2237  f642		       69 02		      ADC	#2
   2238  f644		       85 89		      STA	bally
   2239  f646				   .
   2240  f646							; 
   2241  f646
   2242  f646				   .L082		;  missile0x  =  missile0x  +	1
   2243  f646
   2244  f646		       e6 82		      INC	missile0x
   2245  f648				   .L083		;  missile1x  =  missile1x  -	1
   2246  f648
   2247  f648		       c6 83		      DEC	missile1x
   2248  f64a				   .
   2249  f64a							; 
   2250  f64a
   2251  f64a				   .L084		;  score  =  score  +	1
   2252  f64a
   2253  f64a		       f8		      SED
   2254  f64b		       18		      CLC
   2255  f64c		       a5 95		      LDA	score+2
   2256  f64e		       69 01		      ADC	#$01
   2257  f650		       85 95		      STA	score+2
   2258  f652		       a5 94		      LDA	score+1
   2259  f654		       69 00		      ADC	#$00
   2260  f656		       85 94		      STA	score+1
   2261  f658		       a5 93		      LDA	score
   2262  f65a		       69 00		      ADC	#$00
   2263  f65c		       85 93		      STA	score
   2264  f65e		       d8		      CLD
   2265  f65f				   .L085		;  statusbarcolor  =  $30
   2266  f65f
   2267  f65f		       a9 30		      LDA	#$30
   2268  f661		       85 e6		      STA	statusbarcolor
   2269  f663				   .L086		;  statusbarlength  =	statusbarlength  -  1
   2270  f663
   2271  f663		       c6 f5		      DEC	statusbarlength
   2272  f665				   .
   2273  f665							; 
   2274  f665
   2275  f665				   .L087		;  player0:
   2276  f665
   2277  f665		       a2 b9		      LDX	#<playerL087_0
   2278  f667		       86 8a		      STX	player0pointerlo
   2279  f669		       a9 f7		      LDA	#>playerL087_0
   2280  f66b		       85 8b		      STA	player0pointerhi
   2281  f66d		       a9 07		      LDA	#7
   2282  f66f		       85 8e		      STA	player0height
   2283  f671				   .
   2284  f671							; 
   2285  f671
   2286  f671				   .L088		;  player1:
   2287  f671
   2288  f671		       a2 c1		      LDX	#<playerL088_1
   2289  f673		       86 8c		      STX	player1pointerlo
   2290  f675		       a9 f7		      LDA	#>playerL088_1
   2291  f677		       85 8d		      STA	player1pointerhi
   2292  f679		       a9 07		      LDA	#7
   2293  f67b		       85 8f		      STA	player1height
   2294  f67d				   .
   2295  f67d							; 
   2296  f67d
   2297  f67d				   .L089		;  if joy0left then REFP0  =  8
   2298  f67d
   2299  f67d		       2c 80 02 	      bit	SWCHA
   2300  f680		       70 04		      BVS	.skipL089
   2301  f682				   .condpart1
   2302  f682		       a9 08		      LDA	#8
   2303  f684		       85 0b		      STA	REFP0
   2304  f686				   .skipL089
   2305  f686				   .L090		;  if joy0right then REFP0  =	0
   2306  f686
   2307  f686		       2c 80 02 	      bit	SWCHA
   2308  f689		       30 04		      BMI	.skipL090
   2309  f68b				   .condpart2
   2310  f68b		       a9 00		      LDA	#0
   2311  f68d		       85 0b		      STA	REFP0
   2312  f68f				   .skipL090
   2313  f68f				   .
   2314  f68f							; 
   2315  f68f
   2316  f68f				   .L091		;  drawscreen
   2317  f68f
   2318  f68f		       20 c7 f3 	      jsr	drawscreen
   2319  f692				   .
   2320  f692							; 
   2321  f692
   2322  f692				   .L092		;  playfield:
   2323  f692
   2324  f692				  -	      ifconst	pfres
   2325  f692				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2326  f692					      else
   2327  f692		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2328  f694					      endif
   2329  f694		       4c c3 f6 	      jmp	pflabel1
   2330  f697				   PF_data1
   2331  f697		       00 00		      .byte.b	%00000000, %00000000
   2332  f699					      if	(pfwidth>2)
   2333  f699		       00 00		      .byte.b	%00000000, %00000000
   2334  f69b					      endif
   2335  f69b		       00 00		      .byte.b	%00000000, %00000000
   2336  f69d					      if	(pfwidth>2)
   2337  f69d		       00 00		      .byte.b	%00000000, %00000000
   2338  f69f					      endif
   2339  f69f		       00 00		      .byte.b	%00000000, %00000000
   2340  f6a1					      if	(pfwidth>2)
   2341  f6a1		       00 00		      .byte.b	%00000000, %00000000
   2342  f6a3					      endif
   2343  f6a3		       00 00		      .byte.b	%00000000, %00000000
   2344  f6a5					      if	(pfwidth>2)
   2345  f6a5		       00 00		      .byte.b	%00000000, %00000000
   2346  f6a7					      endif
   2347  f6a7		       00 00		      .byte.b	%00000000, %00000000
   2348  f6a9					      if	(pfwidth>2)
   2349  f6a9		       00 00		      .byte.b	%00000000, %00000000
   2350  f6ab					      endif
   2351  f6ab		       00 00		      .byte.b	%00000000, %00000000
   2352  f6ad					      if	(pfwidth>2)
   2353  f6ad		       00 00		      .byte.b	%00000000, %00000000
   2354  f6af					      endif
   2355  f6af		       00 00		      .byte.b	%00000000, %00000000
   2356  f6b1					      if	(pfwidth>2)
   2357  f6b1		       00 00		      .byte.b	%00000000, %00000000
   2358  f6b3					      endif
   2359  f6b3		       00 00		      .byte.b	%00000000, %00000000
   2360  f6b5					      if	(pfwidth>2)
   2361  f6b5		       00 00		      .byte.b	%00000000, %00000000
   2362  f6b7					      endif
   2363  f6b7		       00 80		      .byte.b	%00000000, %10000000
   2364  f6b9					      if	(pfwidth>2)
   2365  f6b9		       00 00		      .byte.b	%00000000, %00000000
   2366  f6bb					      endif
   2367  f6bb		       00 00		      .byte.b	%00000000, %00000000
   2368  f6bd					      if	(pfwidth>2)
   2369  f6bd		       00 00		      .byte.b	%00000000, %00000000
   2370  f6bf					      endif
   2371  f6bf		       00 80		      .byte.b	%00000000, %10000000
   2372  f6c1					      if	(pfwidth>2)
   2373  f6c1		       00 00		      .byte.b	%00000000, %00000000
   2374  f6c3					      endif
   2375  f6c3				   pflabel1
   2376  f6c3		       bd 97 f6 	      lda	PF_data1,x
   2377  f6c6		       95 a4		      sta	playfield,x
   2378  f6c8		       ca		      dex
   2379  f6c9		       10 f8		      bpl	pflabel1
   2380  f6cb				   .
   2381  f6cb							; 
   2382  f6cb
   2383  f6cb				   .L093		;  pfcolors:
   2384  f6cb
   2385  f6cb		       a9 60		      lda	# $60
   2386  f6cd		       85 08		      sta	COLUPF
   2387  f6cf				  -	      ifconst	pfres
   2388  f6cf				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2389  f6cf					      else
   2390  f6cf		       a9 f7		      lda	#>(pfcolorlabel13-83)
   2391  f6d1					      endif
   2392  f6d1		       85 f1		      sta	pfcolortable+1
   2393  f6d3				  -	      ifconst	pfres
   2394  f6d3				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2395  f6d3					      else
   2396  f6d3		       a9 3e		      lda	#<(pfcolorlabel13-83)
   2397  f6d5					      endif
   2398  f6d5		       85 f0		      sta	pfcolortable
   2399  f6d7				   .
   2400  f6d7							; 
   2401  f6d7
   2402  f6d7				   .
   2403  f6d7							; 
   2404  f6d7
   2405  f6d7				   .L094		;  rem sounds
   2406  f6d7
   2407  f6d7				   .L095		;  if sounda  >  0 then sounda  =  sounda  -  1  :  AUDV1  =  4  :  AUDC1  =  4  :  AUDF0  =  sounda else AUDV1  =  0
   2408  f6d7
   2409  f6d7		       a9 00		      LDA	#0
   2410  f6d9		       c5 d4		      CMP	sounda
   2411  f6db		       b0 0f		      BCS	.skipL095
   2412  f6dd				   .condpart3
   2413  f6dd		       c6 d4		      DEC	sounda
   2414  f6df		       a9 04		      LDA	#4
   2415  f6e1		       85 1a		      STA	AUDV1
   2416  f6e3		       85 16		      STA	AUDC1
   2417  f6e5		       a5 d4		      LDA	sounda
   2418  f6e7		       85 17		      STA	AUDF0
   2419  f6e9		       4c f0 f6 	      jmp	.skipelse0
   2420  f6ec				   .skipL095
   2421  f6ec		       a9 00		      LDA	#0
   2422  f6ee		       85 1a		      STA	AUDV1
   2423  f6f0				   .skipelse0
   2424  f6f0				   .L096		;  if soundb  >  0 then soundb  =  soundb  -  1  :  AUDV1  =  4  :  AUDC1  =  4  :  AUDF1  =  soundb else AUDV1  =  0
   2425  f6f0
   2426  f6f0		       a9 00		      LDA	#0
   2427  f6f2		       c5 d5		      CMP	soundb
   2428  f6f4		       b0 0f		      BCS	.skipL096
   2429  f6f6				   .condpart4
   2430  f6f6		       c6 d5		      DEC	soundb
   2431  f6f8		       a9 04		      LDA	#4
   2432  f6fa		       85 1a		      STA	AUDV1
   2433  f6fc		       85 16		      STA	AUDC1
   2434  f6fe		       a5 d5		      LDA	soundb
   2435  f700		       85 18		      STA	AUDF1
   2436  f702		       4c 09 f7 	      jmp	.skipelse1
   2437  f705				   .skipL096
   2438  f705		       a9 00		      LDA	#0
   2439  f707		       85 1a		      STA	AUDV1
   2440  f709				   .skipelse1
   2441  f709				   .
   2442  f709							; 
   2443  f709
   2444  f709				   .L097		;  goto main
   2445  f709
   2446  f709		       4c 33 f6 	      jmp	.main
   2447  f70c
   2448  f70c				   .
   2449  f70c							; 
   2450  f70c
   2451  f70c				   .gameover
   2452  f70c							; gameover
   2453  f70c
   2454  f70c				   .
   2455  f70c							; 
   2456  f70c
   2457  f70c				   .L098		;  playfield:
   2458  f70c
   2459  f70c				  -	      ifconst	pfres
   2460  f70c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2461  f70c					      else
   2462  f70c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2463  f70e					      endif
   2464  f70e		       4c 3d f7 	      jmp	pflabel2
   2465  f711				   PF_data2
   2466  f711		       00 00		      .byte.b	%00000000, %00000000
   2467  f713					      if	(pfwidth>2)
   2468  f713		       00 00		      .byte.b	%00000000, %00000000
   2469  f715					      endif
   2470  f715		       00 00		      .byte.b	%00000000, %00000000
   2471  f717					      if	(pfwidth>2)
   2472  f717		       00 00		      .byte.b	%00000000, %00000000
   2473  f719					      endif
   2474  f719		       00 00		      .byte.b	%00000000, %00000000
   2475  f71b					      if	(pfwidth>2)
   2476  f71b		       00 00		      .byte.b	%00000000, %00000000
   2477  f71d					      endif
   2478  f71d		       76 ea		      .byte.b	%01110110, %11101010
   2479  f71f					      if	(pfwidth>2)
   2480  f71f		       35 6e		      .byte.b	%00110101, %01101110
   2481  f721					      endif
   2482  f721		       45 ae		      .byte.b	%01000101, %10101110
   2483  f723					      if	(pfwidth>2)
   2484  f723		       55 2a		      .byte.b	%01010101, %00101010
   2485  f725					      endif
   2486  f725		       57 6a		      .byte.b	%01010111, %01101010
   2487  f727					      if	(pfwidth>2)
   2488  f727		       55 26		      .byte.b	%01010101, %00100110
   2489  f729					      endif
   2490  f729		       55 2a		      .byte.b	%01010101, %00101010
   2491  f72b					      if	(pfwidth>2)
   2492  f72b		       56 22		      .byte.b	%01010110, %00100010
   2493  f72d					      endif
   2494  f72d		       35 ea		      .byte.b	%00110101, %11101010
   2495  f72f					      if	(pfwidth>2)
   2496  f72f		       64 2e		      .byte.b	%01100100, %00101110
   2497  f731					      endif
   2498  f731		       00 00		      .byte.b	%00000000, %00000000
   2499  f733					      if	(pfwidth>2)
   2500  f733		       00 00		      .byte.b	%00000000, %00000000
   2501  f735					      endif
   2502  f735		       00 00		      .byte.b	%00000000, %00000000
   2503  f737					      if	(pfwidth>2)
   2504  f737		       00 00		      .byte.b	%00000000, %00000000
   2505  f739					      endif
   2506  f739		       00 00		      .byte.b	%00000000, %00000000
   2507  f73b					      if	(pfwidth>2)
   2508  f73b		       00 00		      .byte.b	%00000000, %00000000
   2509  f73d					      endif
   2510  f73d				   pflabel2
   2511  f73d		       bd 11 f7 	      lda	PF_data2,x
   2512  f740		       95 a4		      sta	playfield,x
   2513  f742		       ca		      dex
   2514  f743		       10 f8		      bpl	pflabel2
   2515  f745				   .
   2516  f745							; 
   2517  f745
   2518  f745				   .L099		;  AUDV0  =  0  :  AUDV1  =  0
   2519  f745
   2520  f745		       a9 00		      LDA	#0
   2521  f747		       85 19		      STA	AUDV0
   2522  f749		       85 1a		      STA	AUDV1
   2523  f74b				   .L0100		;  sounda  =  0  :  soundb  =	0
   2524  f74b
   2525  f74b		       a9 00		      LDA	#0
   2526  f74d		       85 d4		      STA	sounda
   2527  f74f		       85 d5		      STA	soundb
   2528  f751				   .L0101		;  player0x  =  145  :  player0y  =  20
   2529  f751
   2530  f751		       a9 91		      LDA	#145
   2531  f753		       85 80		      STA	player0x
   2532  f755		       a9 14		      LDA	#20
   2533  f757		       85 85		      STA	player0y
   2534  f759				   .L0102		;  player1x  =  200  :  player1y  =  200
   2535  f759
   2536  f759		       a9 c8		      LDA	#200
   2537  f75b		       85 81		      STA	player1x
   2538  f75d		       85 86		      STA	player1y
   2539  f75f				   .L0103		;  missile1x  =  200  :  missile1y  =	200
   2540  f75f
   2541  f75f		       a9 c8		      LDA	#200
   2542  f761		       85 83		      STA	missile1x
   2543  f763		       85 88		      STA	missile1y
   2544  f765				   .L0104		;  ballx  =  200  :  bally  =	200
   2545  f765
   2546  f765		       a9 c8		      LDA	#200
   2547  f767		       85 84		      STA	ballx
   2548  f769		       85 89		      STA	bally
   2549  f76b				   .L0105		;  if joy0fire then counter  =  counter  +  1 else counter  =	0
   2550  f76b
   2551  f76b		       24 0c		      bit	INPT4
   2552  f76d		       30 05		      BMI	.skipL0105
   2553  f76f				   .condpart5
   2554  f76f		       e6 d6		      INC	counter
   2555  f771		       4c 78 f7 	      jmp	.skipelse2
   2556  f774				   .skipL0105
   2557  f774		       a9 00		      LDA	#0
   2558  f776		       85 d6		      STA	counter
   2559  f778				   .skipelse2
   2560  f778				   .L0106		;  if counter	>  50 then reboot
   2561  f778
   2562  f778		       a9 32		      LDA	#50
   2563  f77a		       c5 d6		      CMP	counter
   2564  f77c		       b0 03		      BCS	.skipL0106
   2565  f77e				   .condpart6
   2566  f77e		       6c fc ff 	      JMP	($FFFC)
   2567  f781				   .skipL0106
   2568  f781				   .
   2569  f781							; 
   2570  f781
   2571  f781				   .L0107		;  if switchreset then reboot
   2572  f781
   2573  f781		       a9 01		      lda	#1
   2574  f783		       2c 82 02 	      bit	SWCHB
   2575  f786		       d0 03		      BNE	.skipL0107
   2576  f788				   .condpart7
   2577  f788		       6c fc ff 	      JMP	($FFFC)
   2578  f78b				   .skipL0107
   2579  f78b				   .
   2580  f78b							; 
   2581  f78b
   2582  f78b				   .L0108		;  drawscreen
   2583  f78b
   2584  f78b		       20 c7 f3 	      jsr	drawscreen
   2585  f78e				   .
   2586  f78e							; 
   2587  f78e
   2588  f78e				   .L0109		;  goto gameover
   2589  f78e
   2590  f78e		       4c 0c f7 	      jmp	.gameover
   2591  f791
   2592  f791				  -	      ifconst	pfres
   2593  f791				  -	      if	(<*) > (254-pfres*pfwidth)
   2594  f791				  -	      align	256
   2595  f791				  -	      endif
   2596  f791				  -	      if	(<*) < (136-pfres*pfwidth)
   2597  f791				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2598  f791				  -	      .byte	0
   2599  f791				  -	      repend
   2600  f791				  -	      endif
   2601  f791					      else
   2602  f791				  -	      if	(<*) > 206
   2603  f791				  -	      align	256
   2604  f791					      endif
   2605  f791				  -	      if	(<*) < 88
   2606  f791				  -	      repeat	(88-(<*))
   2607  f791				  -	      .byte	0
   2608  f791				  -	      repend
   2609  f791					      endif
   2610  f791					      endif
   2611  f791				   pfcolorlabel13
   2612  f791		       60 60 00 00	      .byte.b	$60, $60,0,0
   2613  f795		       62 62 00 00	      .byte.b	$62, $62,0,0
   2614  f799		       64 64 00 00	      .byte.b	$64, $64,0,0
   2615  f79d		       64 64 00 00	      .byte.b	$64, $64,0,0
   2616  f7a1		       66 66 00 00	      .byte.b	$66, $66,0,0
   2617  f7a5		       68 68 00 00	      .byte.b	$68, $68,0,0
   2618  f7a9		       68 68 00 00	      .byte.b	$68, $68,0,0
   2619  f7ad		       6a 6a 00 00	      .byte.b	$6A, $6A,0,0
   2620  f7b1		       6c 6c 00 00	      .byte.b	$6C, $6C,0,0
   2621  f7b5		       6e 6e 00 00	      .byte.b	$6E, $6E,0,0
   2622  f7b9				  -	      if	(<*) > (<(*+7))
   2623  f7b9				  -	      repeat	($100-<*)
   2624  f7b9				  -	      .byte	0
   2625  f7b9				  -	      repend
   2626  f7b9					      endif
   2627  f7b9				   playerL087_0
   2628  f7b9		       00		      .byte.b	%00000000
   2629  f7ba		       e7		      .byte.b	%11100111
   2630  f7bb		       45		      .byte.b	%01000101
   2631  f7bc		       65		      .byte.b	%01100101
   2632  f7bd		       55		      .byte.b	%01010101
   2633  f7be		       55		      .byte.b	%01010101
   2634  f7bf		       e7		      .byte.b	%11100111
   2635  f7c0		       00		      .byte.b	%00000000
   2636  f7c1				  -	      if	(<*) > (<(*+7))
   2637  f7c1				  -	      repeat	($100-<*)
   2638  f7c1				  -	      .byte	0
   2639  f7c1				  -	      repend
   2640  f7c1					      endif
   2641  f7c1				   playerL088_1
   2642  f7c1		       00		      .byte.b	%00000000
   2643  f7c2		       e7		      .byte.b	%11100111
   2644  f7c3		       42		      .byte.b	%01000010
   2645  f7c4		       62		      .byte.b	%01100010
   2646  f7c5		       52		      .byte.b	%01010010
   2647  f7c6		       52		      .byte.b	%01010010
   2648  f7c7		       e6		      .byte.b	%11100110
   2649  f7c8		       00		      .byte.b	%00000000
   2650  f7c9					      if	ECHOFIRST
      2003 bytes of ROM space left
   2651  f7c9					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2652  f7c9					      endif
   2653  f7c9		       00 01	   ECHOFIRST  =	1
   2654  f7c9
   2655  f7c9
   2656  f7c9
   2657  f7c9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2658  f7c9
   2659  f7c9							; feel free to modify the score graphics - just keep each digit 8 high
   2660  f7c9							; and keep the conditional compilation stuff intact
   2661  f7c9				  -	      ifconst	ROM2k
   2662  f7c9				  -	      ORG	$F7AC-8
   2663  f7c9					      else
   2664  f7c9				  -	      ifconst	bankswitch
   2665  f7c9				  -	      if	bankswitch == 8
   2666  f7c9				  -	      ORG	$2F94-bscode_length
   2667  f7c9				  -	      RORG	$FF94-bscode_length
   2668  f7c9				  -	      endif
   2669  f7c9				  -	      if	bankswitch == 16
   2670  f7c9				  -	      ORG	$4F94-bscode_length
   2671  f7c9				  -	      RORG	$FF94-bscode_length
   2672  f7c9				  -	      endif
   2673  f7c9				  -	      if	bankswitch == 32
   2674  f7c9				  -	      ORG	$8F94-bscode_length
   2675  f7c9				  -	      RORG	$FF94-bscode_length
   2676  f7c9				  -	      endif
   2677  f7c9				  -	      if	bankswitch == 64
   2678  f7c9				  -	      ORG	$10F80-bscode_length
   2679  f7c9				  -	      RORG	$1FF80-bscode_length
   2680  f7c9				  -	      endif
   2681  f7c9					      else
   2682  ff9c					      ORG	$FF9C
   2683  ff9c					      endif
   2684  ff9c					      endif
   2685  ff9c
   2686  ff9c							; font equates
   2687  ff9c		       00 01	   .21stcentury =	1
   2688  ff9c		       00 02	   alarmclock =	2
   2689  ff9c		       00 03	   handwritten =	3
   2690  ff9c		       00 04	   interrupted =	4
   2691  ff9c		       00 05	   retroputer =	5
   2692  ff9c		       00 06	   whimsey    =	6
   2693  ff9c		       00 07	   tiny       =	7
   2694  ff9c		       00 08	   hex	      =	8
   2695  ff9c
   2696  ff9c				  -	      ifconst	font
   2697  ff9c				  -	      if	font == hex
   2698  ff9c				  -	      ORG	. - 48
   2699  ff9c				  -	      endif
   2700  ff9c					      endif
   2701  ff9c
   2702  ff9c				   scoretable
   2703  ff9c
   2704  ff9c				  -	      ifconst	font
   2705  ff9c				  -	      if	font == .21stcentury
   2706  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2707  ff9c				  -	      endif
   2708  ff9c				  -	      if	font == alarmclock
   2709  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2710  ff9c				  -	      endif
   2711  ff9c				  -	      if	font == handwritten
   2712  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2713  ff9c				  -	      endif
   2714  ff9c				  -	      if	font == interrupted
   2715  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2716  ff9c				  -	      endif
   2717  ff9c				  -	      if	font == retroputer
   2718  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2719  ff9c				  -	      endif
   2720  ff9c				  -	      if	font == whimsey
   2721  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2722  ff9c				  -	      endif
   2723  ff9c				  -	      if	font == tiny
   2724  ff9c				  -	      include	"score_graphics.asm.tiny"
   2725  ff9c				  -	      endif
   2726  ff9c				  -	      if	font == hex
   2727  ff9c				  -	      include	"score_graphics.asm.hex"
   2728  ff9c				  -	      endif
   2729  ff9c					      else		; default font
   2730  ff9c
   2731  ff9c		       3c		      .byte.b	%00111100
   2732  ff9d		       66		      .byte.b	%01100110
   2733  ff9e		       66		      .byte.b	%01100110
   2734  ff9f		       66		      .byte.b	%01100110
   2735  ffa0		       66		      .byte.b	%01100110
   2736  ffa1		       66		      .byte.b	%01100110
   2737  ffa2		       66		      .byte.b	%01100110
   2738  ffa3		       3c		      .byte.b	%00111100
   2739  ffa4
   2740  ffa4		       7e		      .byte.b	%01111110
   2741  ffa5		       18		      .byte.b	%00011000
   2742  ffa6		       18		      .byte.b	%00011000
   2743  ffa7		       18		      .byte.b	%00011000
   2744  ffa8		       18		      .byte.b	%00011000
   2745  ffa9		       38		      .byte.b	%00111000
   2746  ffaa		       18		      .byte.b	%00011000
   2747  ffab		       08		      .byte.b	%00001000
   2748  ffac
   2749  ffac		       7e		      .byte.b	%01111110
   2750  ffad		       60		      .byte.b	%01100000
   2751  ffae		       60		      .byte.b	%01100000
   2752  ffaf		       3c		      .byte.b	%00111100
   2753  ffb0		       06		      .byte.b	%00000110
   2754  ffb1		       06		      .byte.b	%00000110
   2755  ffb2		       46		      .byte.b	%01000110
   2756  ffb3		       3c		      .byte.b	%00111100
   2757  ffb4
   2758  ffb4		       3c		      .byte.b	%00111100
   2759  ffb5		       46		      .byte.b	%01000110
   2760  ffb6		       06		      .byte.b	%00000110
   2761  ffb7		       06		      .byte.b	%00000110
   2762  ffb8		       1c		      .byte.b	%00011100
   2763  ffb9		       06		      .byte.b	%00000110
   2764  ffba		       46		      .byte.b	%01000110
   2765  ffbb		       3c		      .byte.b	%00111100
   2766  ffbc
   2767  ffbc		       0c		      .byte.b	%00001100
   2768  ffbd		       0c		      .byte.b	%00001100
   2769  ffbe		       7e		      .byte.b	%01111110
   2770  ffbf		       4c		      .byte.b	%01001100
   2771  ffc0		       4c		      .byte.b	%01001100
   2772  ffc1		       2c		      .byte.b	%00101100
   2773  ffc2		       1c		      .byte.b	%00011100
   2774  ffc3		       0c		      .byte.b	%00001100
   2775  ffc4
   2776  ffc4		       3c		      .byte.b	%00111100
   2777  ffc5		       46		      .byte.b	%01000110
   2778  ffc6		       06		      .byte.b	%00000110
   2779  ffc7		       06		      .byte.b	%00000110
   2780  ffc8		       3c		      .byte.b	%00111100
   2781  ffc9		       60		      .byte.b	%01100000
   2782  ffca		       60		      .byte.b	%01100000
   2783  ffcb		       7e		      .byte.b	%01111110
   2784  ffcc
   2785  ffcc		       3c		      .byte.b	%00111100
   2786  ffcd		       66		      .byte.b	%01100110
   2787  ffce		       66		      .byte.b	%01100110
   2788  ffcf		       66		      .byte.b	%01100110
   2789  ffd0		       7c		      .byte.b	%01111100
   2790  ffd1		       60		      .byte.b	%01100000
   2791  ffd2		       62		      .byte.b	%01100010
   2792  ffd3		       3c		      .byte.b	%00111100
   2793  ffd4
   2794  ffd4		       30		      .byte.b	%00110000
   2795  ffd5		       30		      .byte.b	%00110000
   2796  ffd6		       30		      .byte.b	%00110000
   2797  ffd7		       18		      .byte.b	%00011000
   2798  ffd8		       0c		      .byte.b	%00001100
   2799  ffd9		       06		      .byte.b	%00000110
   2800  ffda		       42		      .byte.b	%01000010
   2801  ffdb		       3e		      .byte.b	%00111110
   2802  ffdc
   2803  ffdc		       3c		      .byte.b	%00111100
   2804  ffdd		       66		      .byte.b	%01100110
   2805  ffde		       66		      .byte.b	%01100110
   2806  ffdf		       66		      .byte.b	%01100110
   2807  ffe0		       3c		      .byte.b	%00111100
   2808  ffe1		       66		      .byte.b	%01100110
   2809  ffe2		       66		      .byte.b	%01100110
   2810  ffe3		       3c		      .byte.b	%00111100
   2811  ffe4
   2812  ffe4		       3c		      .byte.b	%00111100
   2813  ffe5		       46		      .byte.b	%01000110
   2814  ffe6		       06		      .byte.b	%00000110
   2815  ffe7		       3e		      .byte.b	%00111110
   2816  ffe8		       66		      .byte.b	%01100110
   2817  ffe9		       66		      .byte.b	%01100110
   2818  ffea		       66		      .byte.b	%01100110
   2819  ffeb		       3c		      .byte.b	%00111100
   2820  ffec
   2821  ffec					      ifnconst	DPC_kernel_options
   2822  ffec
   2823  ffec		       00		      .byte.b	%00000000
   2824  ffed		       00		      .byte.b	%00000000
   2825  ffee		       00		      .byte.b	%00000000
   2826  ffef		       00		      .byte.b	%00000000
   2827  fff0		       00		      .byte.b	%00000000
   2828  fff1		       00		      .byte.b	%00000000
   2829  fff2		       00		      .byte.b	%00000000
   2830  fff3		       00		      .byte.b	%00000000
   2831  fff4
   2832  fff4					      endif
   2833  fff4
   2834  fff4					      endif
   2835  fff4
   2836  fff4				  -	      ifconst	ROM2k
   2837  fff4				  -	      ORG	$F7FC
   2838  fff4					      else
   2839  fff4				  -	      ifconst	bankswitch
   2840  fff4				  -	      if	bankswitch == 8
   2841  fff4				  -	      ORG	$2FF4-bscode_length
   2842  fff4				  -	      RORG	$FFF4-bscode_length
   2843  fff4				  -	      endif
   2844  fff4				  -	      if	bankswitch == 16
   2845  fff4				  -	      ORG	$4FF4-bscode_length
   2846  fff4				  -	      RORG	$FFF4-bscode_length
   2847  fff4				  -	      endif
   2848  fff4				  -	      if	bankswitch == 32
   2849  fff4				  -	      ORG	$8FF4-bscode_length
   2850  fff4				  -	      RORG	$FFF4-bscode_length
   2851  fff4				  -	      endif
   2852  fff4				  -	      if	bankswitch == 64
   2853  fff4				  -	      ORG	$10FE0-bscode_length
   2854  fff4				  -	      RORG	$1FFE0-bscode_length
   2855  fff4				  -	      endif
   2856  fff4					      else
   2857  fffc					      ORG	$FFFC
   2858  fffc					      endif
   2859  fffc					      endif
   2860  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2861  fffc
   2862  fffc				  -	      ifconst	bankswitch
   2863  fffc				  -	      if	bankswitch == 8
   2864  fffc				  -	      ORG	$2FFC
   2865  fffc				  -	      RORG	$FFFC
   2866  fffc				  -	      endif
   2867  fffc				  -	      if	bankswitch == 16
   2868  fffc				  -	      ORG	$4FFC
   2869  fffc				  -	      RORG	$FFFC
   2870  fffc				  -	      endif
   2871  fffc				  -	      if	bankswitch == 32
   2872  fffc				  -	      ORG	$8FFC
   2873  fffc				  -	      RORG	$FFFC
   2874  fffc				  -	      endif
   2875  fffc				  -	      if	bankswitch == 64
   2876  fffc				  -	      ORG	$10FF0
   2877  fffc				  -	      RORG	$1FFF0
   2878  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2879  fffc				  -	      ORG	$10FF8
   2880  fffc				  -	      RORG	$1FFF8
   2881  fffc				  -	      ifconst	superchip
   2882  fffc				  -	      .byte	"E","F","S","C"
   2883  fffc				  -	      else
   2884  fffc				  -	      .byte	"E","F","E","F"
   2885  fffc				  -	      endif
   2886  fffc				  -	      ORG	$10FFC
   2887  fffc				  -	      RORG	$1FFFC
   2888  fffc				  -	      endif
   2889  fffc					      else
   2890  fffc				  -	      ifconst	ROM2k
   2891  fffc				  -	      ORG	$F7FC
   2892  fffc					      else
   2893  fffc					      ORG	$FFFC
   2894  fffc					      endif
   2895  fffc					      endif
   2896  fffc		       00 f0		      .word.w	(start & $ffff)
   2897  fffe		       00 f0		      .word.w	(start & $ffff)
